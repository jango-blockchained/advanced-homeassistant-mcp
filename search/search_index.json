{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udfe0 MCP Server for Home Assistant","text":"<p>Welcome to the Model Context Protocol (MCP) Server documentation! This guide will help you get started with integrating a lightweight automation tool with your Home Assistant setup.</p>"},{"location":"#what-is-mcp-server","title":"What is MCP Server?","text":"<p>MCP Server is a bridge between Home Assistant and custom automation tools, enabling basic device control and real-time monitoring of your smart home environment. It provides a flexible interface for managing and interacting with your home automation setup.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#device-control","title":"\ud83c\udfae Device Control","text":"<ul> <li>Basic REST API for device management</li> <li>WebSocket and Server-Sent Events (SSE) for real-time updates</li> <li>Simple automation rule support</li> </ul>"},{"location":"#security-performance","title":"\ud83d\udee1\ufe0f Security &amp; Performance","text":"<ul> <li>JWT authentication</li> <li>Basic request validation</li> <li>Lightweight server design</li> </ul>"},{"location":"#documentation-structure","title":"Documentation Structure","text":""},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation Guide - Set up MCP Server</li> <li>Quick Start Tutorial - Basic usage examples</li> </ul>"},{"location":"#core-documentation","title":"Core Documentation","text":"<ul> <li>API Documentation - API reference</li> <li>Architecture Overview - System design</li> <li>Contributing Guidelines - How to contribute</li> <li>Troubleshooting Guide - Common issues</li> </ul>"},{"location":"#support","title":"Support","text":"<p>Need help or want to report issues?</p> <ul> <li>GitHub Issues</li> <li>GitHub Discussions</li> </ul>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details. </p>"},{"location":"api/","title":"Home Assistant MCP Server API Documentation","text":""},{"location":"api/#overview","title":"Overview","text":"<p>This document provides a reference for the MCP Server API, which offers basic device control and state management for Home Assistant.</p>"},{"location":"api/#authentication","title":"Authentication","text":"<p>All API requests require a valid JWT token in the Authorization header:</p> <pre><code>Authorization: Bearer YOUR_TOKEN\n</code></pre>"},{"location":"api/#core-endpoints","title":"Core Endpoints","text":""},{"location":"api/#device-state-management","title":"Device State Management","text":""},{"location":"api/#get-device-state","title":"Get Device State","text":"<pre><code>GET /api/state/{entity_id}\n</code></pre> <p>Response: <pre><code>{\n  \"entity_id\": \"light.living_room\",\n  \"state\": \"on\",\n  \"attributes\": {\n    \"brightness\": 128\n  }\n}\n</code></pre></p>"},{"location":"api/#update-device-state","title":"Update Device State","text":"<pre><code>POST /api/state\nContent-Type: application/json\n\n{\n  \"entity_id\": \"light.living_room\",\n  \"state\": \"on\",\n  \"attributes\": {\n    \"brightness\": 128\n  }\n}\n</code></pre>"},{"location":"api/#device-control","title":"Device Control","text":""},{"location":"api/#execute-device-command","title":"Execute Device Command","text":"<pre><code>POST /api/control\nContent-Type: application/json\n\n{\n  \"entity_id\": \"light.living_room\",\n  \"command\": \"turn_on\",\n  \"parameters\": {\n    \"brightness\": 50\n  }\n}\n</code></pre>"},{"location":"api/#real-time-updates","title":"Real-Time Updates","text":""},{"location":"api/#websocket-connection","title":"WebSocket Connection","text":"<p>Connect to real-time updates:</p> <pre><code>const ws = new WebSocket('ws://localhost:3000/events');\nws.onmessage = (event) =&gt; {\n  const deviceUpdate = JSON.parse(event.data);\n  console.log('Device state changed:', deviceUpdate);\n};\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":""},{"location":"api/#common-error-responses","title":"Common Error Responses","text":"<pre><code>{\n  \"error\": {\n    \"code\": \"INVALID_REQUEST\",\n    \"message\": \"Invalid request parameters\",\n    \"details\": \"Entity ID not found or invalid command\"\n  }\n}\n</code></pre>"},{"location":"api/#rate-limiting","title":"Rate Limiting","text":"<p>Basic rate limiting is implemented: - Maximum of 100 requests per minute - Excess requests will receive a 429 Too Many Requests response</p>"},{"location":"api/#supported-operations","title":"Supported Operations","text":""},{"location":"api/#supported-commands","title":"Supported Commands","text":"<ul> <li><code>turn_on</code></li> <li><code>turn_off</code></li> <li><code>toggle</code></li> <li><code>set_brightness</code></li> <li><code>set_color</code></li> </ul>"},{"location":"api/#supported-entities","title":"Supported Entities","text":"<ul> <li>Lights</li> <li>Switches</li> <li>Climate controls</li> <li>Media players</li> </ul>"},{"location":"api/#limitations","title":"Limitations","text":"<ul> <li>Limited to basic device control</li> <li>No advanced automation</li> <li>Minimal error handling</li> <li>Basic authentication</li> </ul>"},{"location":"api/#best-practices","title":"Best Practices","text":"<ol> <li>Always include a valid JWT token</li> <li>Handle potential errors in your client code</li> <li>Use WebSocket for real-time updates when possible</li> <li>Validate entity IDs before sending commands</li> </ol>"},{"location":"api/#example-client-usage","title":"Example Client Usage","text":"<pre><code>async function controlDevice(entityId: string, command: string, params?: Record&lt;string, unknown&gt;) {\n  try {\n    const response = await fetch('/api/control', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`\n    },\n    body: JSON.stringify({\n        entity_id: entityId,\n        command,\n        parameters: params\n    })\n  });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.message);\n    }\n\n    return await response.json();\n} catch (error) {\n    console.error('Device control failed:', error);\n    throw error;\n  }\n}\n\n// Usage example\ncontrolDevice('light.living_room', 'turn_on', { brightness: 50 })\n  .then(result =&gt; console.log('Device controlled successfully'))\n  .catch(error =&gt; console.error('Control failed', error));\n</code></pre>"},{"location":"api/#future-development","title":"Future Development","text":"<p>Planned improvements: - Enhanced error handling - More comprehensive device support - Improved authentication mechanisms</p> <p>API is subject to change. Always refer to the latest documentation.</p>"},{"location":"architecture/","title":"Architecture Overview \ud83c\udfd7\ufe0f","text":"<p>This document describes the architecture of the MCP Server, explaining how different components work together to provide a bridge between Home Assistant and custom automation tools.</p>"},{"location":"architecture/#system-architecture","title":"System Architecture","text":"<pre><code>graph TD\n    subgraph \"Client Layer\"\n        WC[Web Clients]\n        MC[Mobile Clients]\n    end\n\n    subgraph \"MCP Server\"\n        API[API Gateway]\n        SSE[SSE Manager]\n        WS[WebSocket Server]\n        CM[Command Manager]\n    end\n\n    subgraph \"Home Assistant\"\n        HA[Home Assistant Core]\n        Dev[Devices &amp; Services]\n    end\n\n    WC --&gt; |HTTP/WS| API\n    MC --&gt; |HTTP/WS| API\n\n    API --&gt; |Events| SSE\n    API --&gt; |Real-time| WS\n\n    API --&gt; HA\n    HA --&gt; API\n</code></pre>"},{"location":"architecture/#core-components","title":"Core Components","text":""},{"location":"architecture/#api-gateway","title":"API Gateway","text":"<ul> <li>Handles incoming HTTP and WebSocket requests</li> <li>Provides endpoints for device management</li> <li>Implements basic authentication and request validation</li> </ul>"},{"location":"architecture/#sse-manager","title":"SSE Manager","text":"<ul> <li>Manages Server-Sent Events for real-time updates</li> <li>Broadcasts device state changes to connected clients</li> </ul>"},{"location":"architecture/#websocket-server","title":"WebSocket Server","text":"<ul> <li>Provides real-time, bidirectional communication</li> <li>Supports basic device control and state monitoring</li> </ul>"},{"location":"architecture/#command-manager","title":"Command Manager","text":"<ul> <li>Processes device control requests</li> <li>Translates API commands to Home Assistant compatible formats</li> </ul>"},{"location":"architecture/#communication-flow","title":"Communication Flow","text":"<ol> <li>Client sends a request to the MCP Server API</li> <li>API Gateway authenticates the request</li> <li>Command Manager processes the request</li> <li>Request is forwarded to Home Assistant</li> <li>Response is sent back to the client via API or WebSocket</li> </ol>"},{"location":"architecture/#key-design-principles","title":"Key Design Principles","text":"<ul> <li>Simplicity: Lightweight, focused design</li> <li>Flexibility: Easily extendable architecture</li> <li>Performance: Efficient request handling</li> <li>Security: Basic authentication and validation</li> </ul>"},{"location":"architecture/#limitations","title":"Limitations","text":"<ul> <li>Basic device control capabilities</li> <li>Limited advanced automation features</li> <li>Minimal third-party integrations</li> </ul>"},{"location":"architecture/#future-improvements","title":"Future Improvements","text":"<ul> <li>Enhanced error handling</li> <li>More robust authentication</li> <li>Expanded device type support</li> </ul> <p>Architecture is subject to change as the project evolves. </p>"},{"location":"contributing/","title":"Contributing Guide \ud83e\udd1d","text":"<p>Thank you for your interest in contributing to the MCP Server project!</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Bun &gt;= 1.0.26</li> <li>Home Assistant instance</li> <li>Basic understanding of TypeScript</li> </ul>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<ol> <li>Fork the repository</li> <li> <p>Clone your fork:    <pre><code>git clone https://github.com/YOUR_USERNAME/homeassistant-mcp.git\ncd homeassistant-mcp\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>bun install\n</code></pre></p> </li> <li> <p>Configure environment:    <pre><code>cp .env.example .env\n# Edit .env with your Home Assistant details\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#branch-naming","title":"Branch Naming","text":"<ul> <li><code>feature/</code> - New features</li> <li><code>fix/</code> - Bug fixes</li> <li><code>docs/</code> - Documentation updates</li> </ul> <p>Example: <pre><code>git checkout -b feature/device-control-improvements\n</code></pre></p>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>Follow simple, clear commit messages:</p> <pre><code>type: brief description\n\n[optional detailed explanation]\n</code></pre> <p>Types: - <code>feat:</code> - New feature - <code>fix:</code> - Bug fix - <code>docs:</code> - Documentation - <code>chore:</code> - Maintenance</p>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Use TypeScript</li> <li>Follow existing code structure</li> <li>Keep changes focused and minimal</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Run tests before submitting:</p> <pre><code># Run all tests\nbun test\n\n# Run specific test\nbun test test/api/control.test.ts\n</code></pre>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure tests pass</li> <li>Update documentation if needed</li> <li>Provide clear description of changes</li> </ol>"},{"location":"contributing/#pr-template","title":"PR Template","text":"<pre><code>## Description\nBrief explanation of the changes\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Documentation update\n\n## Testing\nDescribe how you tested these changes\n</code></pre>"},{"location":"contributing/#reporting-issues","title":"Reporting Issues","text":"<ul> <li>Use GitHub Issues</li> <li>Provide clear, reproducible steps</li> <li>Include environment details</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<ul> <li>Be respectful</li> <li>Focus on constructive feedback</li> <li>Help maintain a positive environment</li> </ul>"},{"location":"contributing/#resources","title":"Resources","text":"<ul> <li>API Documentation</li> <li>Troubleshooting Guide</li> </ul> <p>Thank you for contributing! </p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>Begin your journey with the Home Assistant MCP Server by following these steps:</p> <ul> <li>API Documentation: Read the API Documentation for available endpoints.</li> <li>Real-Time Updates: Learn about Server-Sent Events for live communication.</li> <li>Tools: Explore available Tools for device control and automation.</li> <li>Configuration: Refer to the Configuration Guide for setup and advanced settings.</li> </ul>"},{"location":"getting-started/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues: 1. Verify that your Home Assistant instance is accessible. 2. Ensure that all required environment variables are properly set. 3. Consult the Troubleshooting Guide for additional solutions.</p>"},{"location":"getting-started/#development","title":"Development","text":"<p>For contributors: 1. Fork the repository. 2. Create a feature branch. 3. Follow the Development Guide for contribution guidelines. 4. Submit a pull request with your enhancements.</p>"},{"location":"getting-started/#support","title":"Support","text":"<p>Need help? - Visit our GitHub Issues. - Review the Troubleshooting Guide. - Check the FAQ for common questions. </p>"},{"location":"roadmap/","title":"Roadmap for MCP Server","text":"<p>The following roadmap outlines our planned enhancements and future directions for the Home Assistant MCP Server. This document is a living guide that will be updated as new features are developed.</p>"},{"location":"roadmap/#near-term-goals","title":"Near-Term Goals","text":"<ul> <li>Core Functionality Improvements:</li> <li>Enhance REST API capabilities</li> <li>Improve WebSocket and SSE reliability</li> <li> <p>Develop more robust error handling</p> </li> <li> <p>Security Enhancements:</p> </li> <li>Strengthen JWT authentication</li> <li>Improve input validation</li> <li> <p>Add basic logging for security events</p> </li> <li> <p>Performance Optimizations:</p> </li> <li>Optimize server response times</li> <li>Improve resource utilization</li> <li>Implement basic caching mechanisms</li> </ul>"},{"location":"roadmap/#mid-term-goals","title":"Mid-Term Goals","text":"<ul> <li>Device Integration:</li> <li>Expand support for additional Home Assistant device types</li> <li>Improve device state synchronization</li> <li> <p>Develop more flexible automation rule support</p> </li> <li> <p>Developer Experience:</p> </li> <li>Improve documentation</li> <li>Create more comprehensive examples</li> <li>Develop basic CLI tools for configuration</li> </ul>"},{"location":"roadmap/#long-term-vision","title":"Long-Term Vision","text":"<ul> <li>Extensibility:</li> <li>Design a simple plugin system</li> <li>Create guidelines for community contributions</li> <li> <p>Establish a clear extension mechanism</p> </li> <li> <p>Reliability:</p> </li> <li>Implement comprehensive testing</li> <li>Develop monitoring and basic health check features</li> <li>Improve overall system stability</li> </ul>"},{"location":"roadmap/#how-to-follow-the-roadmap","title":"How to Follow the Roadmap","text":"<ul> <li>Community Involvement: We welcome feedback and contributions.</li> <li>Transparency: Check our GitHub repository for ongoing discussions.</li> <li>Iterative Development: Goals may change based on community needs and technical feasibility.</li> </ul> <p>This roadmap is intended as a guide and may evolve based on community needs, technological advancements, and strategic priorities. </p>"},{"location":"testing/","title":"Testing Documentation","text":""},{"location":"testing/#quick-reference","title":"Quick Reference","text":"<pre><code># Most Common Commands\nbun test                    # Run all tests\nbun test --watch           # Run tests in watch mode\nbun test --coverage        # Run tests with coverage\nbun test path/to/test.ts   # Run a specific test file\n\n# Additional Options\nDEBUG=true bun test        # Run with debug output\nbun test --pattern \"auth\"  # Run tests matching a pattern\nbun test --timeout 60000   # Run with a custom timeout\n</code></pre>"},{"location":"testing/#overview","title":"Overview","text":"<p>This document describes the testing setup and practices used in the Home Assistant MCP project. We use Bun's test runner for both unit and integration testing, ensuring comprehensive coverage across modules.</p>"},{"location":"testing/#test-structure","title":"Test Structure","text":"<p>Tests are organized in two main locations:</p> <ol> <li>Root Level Integration Tests (<code>/__tests__/</code>):</li> </ol> <pre><code>__tests__/\n\u251c\u2500\u2500 ai/              # AI/ML component tests\n\u251c\u2500\u2500 api/             # API integration tests\n\u251c\u2500\u2500 context/         # Context management tests\n\u251c\u2500\u2500 hass/            # Home Assistant integration tests\n\u251c\u2500\u2500 schemas/         # Schema validation tests\n\u251c\u2500\u2500 security/        # Security integration tests\n\u251c\u2500\u2500 tools/           # Tools and utilities tests\n\u251c\u2500\u2500 websocket/       # WebSocket integration tests\n\u251c\u2500\u2500 helpers.test.ts  # Helper function tests\n\u251c\u2500\u2500 index.test.ts    # Main application tests\n\u2514\u2500\u2500 server.test.ts   # Server integration tests\n</code></pre> <ol> <li>Component Level Unit Tests (<code>src/**/</code>):</li> </ol> <pre><code>src/\n\u251c\u2500\u2500 __tests__/   # Global test setup and utilities\n\u2502   \u2514\u2500\u2500 setup.ts # Global test configuration\n\u251c\u2500\u2500 component/\n\u2502   \u251c\u2500\u2500 __tests__/   # Component-specific unit tests\n\u2502   \u2514\u2500\u2500 component.ts\n</code></pre>"},{"location":"testing/#test-configuration","title":"Test Configuration","text":""},{"location":"testing/#bun-test-configuration-bunfigtoml","title":"Bun Test Configuration (<code>bunfig.toml</code>)","text":"<pre><code>[test]\npreload = [\"./src/__tests__/setup.ts\"]  # Global test setup\ncoverage = true                         # Enable coverage by default\ntimeout = 30000                         # Test timeout in milliseconds\ntestMatch = [\"**/__tests__/**/*.test.ts\"] # Test file patterns\n</code></pre>"},{"location":"testing/#bun-scripts","title":"Bun Scripts","text":"<p>Available test commands in <code>package.json</code>:</p> <pre><code># Run all tests\nbun test\n\n# Watch mode for development\nbun test --watch\n\n# Generate coverage report\nbun test --coverage\n\n# Run linting\nbun run lint\n\n# Format code\nbun run format\n</code></pre>"},{"location":"testing/#test-setup","title":"Test Setup","text":""},{"location":"testing/#global-configuration","title":"Global Configuration","text":"<p>A global test setup file (<code>src/__tests__/setup.ts</code>) provides: - Environment configuration - Mock utilities - Test helper functions - Global lifecycle hooks</p>"},{"location":"testing/#test-environment","title":"Test Environment","text":"<ul> <li>Environment variables are loaded from <code>.env.test</code>.</li> <li>Console output is minimized unless <code>DEBUG=true</code>.</li> <li>JWT secrets and tokens are preconfigured for testing.</li> <li>Rate limiting and security features are initialized appropriately.</li> </ul>"},{"location":"testing/#running-tests","title":"Running Tests","text":"<pre><code># Basic test run\nbun test\n\n# Run tests with coverage\nbun test --coverage\n\n# Run a specific test file\nbun test path/to/test.test.ts\n\n# Run tests in watch mode\nbun test --watch\n\n# Run tests with debug output\nDEBUG=true bun test\n\n# Run tests with increased timeout\nbun test --timeout 60000\n\n# Run tests matching a pattern\nbun test --pattern \"auth\"\n</code></pre>"},{"location":"testing/#advanced-debugging","title":"Advanced Debugging","text":""},{"location":"testing/#using-node-inspector","title":"Using Node Inspector","text":"<pre><code># Start tests with inspector\nbun test --inspect\n\n# Start tests with inspector and break on first line\nbun test --inspect-brk\n</code></pre>"},{"location":"testing/#using-vs-code","title":"Using VS Code","text":"<p>Create a launch configuration in <code>.vscode/launch.json</code>:</p> <pre><code>{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"bun\",\n      \"request\": \"launch\",\n      \"name\": \"Debug Tests\",\n      \"program\": \"${workspaceFolder}/node_modules/bun/bin/bun\",\n      \"args\": [\"test\", \"${file}\"],\n      \"cwd\": \"${workspaceFolder}\",\n      \"env\": { \"DEBUG\": \"true\" }\n    }\n  ]\n}\n</code></pre>"},{"location":"testing/#test-isolation","title":"Test Isolation","text":"<p>To run a single test in isolation:</p> <pre><code>describe.only(\"specific test suite\", () =&gt; {\n  it.only(\"specific test case\", () =&gt; {\n    // Only this test will run\n  });\n});\n</code></pre>"},{"location":"testing/#writing-tests","title":"Writing Tests","text":""},{"location":"testing/#test-file-naming","title":"Test File Naming","text":"<ul> <li>Place test files in a <code>__tests__</code> directory adjacent to the code being tested.</li> <li>Name files with the pattern <code>*.test.ts</code>.</li> <li>Mirror the structure of the source code in your test organization.</li> </ul>"},{"location":"testing/#example-test-structure","title":"Example Test Structure","text":"<pre><code>describe(\"Security Features\", () =&gt; {\n  it(\"should validate tokens correctly\", () =&gt; {\n    const payload = { userId: \"123\", role: \"user\" };\n    const token = jwt.sign(payload, validSecret, { expiresIn: \"1h\" });\n    const result = TokenManager.validateToken(token, testIp);\n    expect(result.valid).toBe(true);\n  });\n});\n</code></pre>"},{"location":"testing/#coverage","title":"Coverage","text":"<p>The project maintains strict coverage: - Overall coverage: at least 80% - Critical paths: 90%+ - New features: \u226585% coverage</p> <p>Generate a coverage report with:</p> <pre><code>bun test --coverage\n</code></pre>"},{"location":"testing/#security-middleware-testing","title":"Security Middleware Testing","text":""},{"location":"testing/#utility-function-testing","title":"Utility Function Testing","text":"<p>The security middleware now uses a utility-first approach, which allows for more granular and comprehensive testing. Each security function is now independently testable, improving code reliability and maintainability.</p>"},{"location":"testing/#key-utility-functions","title":"Key Utility Functions","text":"<ol> <li>Rate Limiting (<code>checkRateLimit</code>)</li> <li>Tests multiple scenarios:<ul> <li>Requests under threshold</li> <li>Requests exceeding threshold</li> <li>Rate limit reset after window expiration</li> </ul> </li> </ol> <pre><code>// Example test\nit('should throw when requests exceed threshold', () =&gt; {\n  const ip = '127.0.0.2';\n  for (let i = 0; i &lt; 11; i++) {\n    if (i &lt; 10) {\n      expect(() =&gt; checkRateLimit(ip, 10)).not.toThrow();\n    } else {\n      expect(() =&gt; checkRateLimit(ip, 10)).toThrow('Too many requests from this IP');\n    }\n  }\n});\n</code></pre> <ol> <li>Request Validation (<code>validateRequestHeaders</code>)</li> <li>Tests content type validation</li> <li>Checks request size limits</li> <li>Validates authorization headers</li> </ol> <pre><code>it('should reject invalid content type', () =&gt; {\n  const mockRequest = new Request('http://localhost', {\n    method: 'POST',\n    headers: { 'content-type': 'text/plain' }\n  });\n  expect(() =&gt; validateRequestHeaders(mockRequest)).toThrow('Content-Type must be application/json');\n});\n</code></pre> <ol> <li>Input Sanitization (<code>sanitizeValue</code>)</li> <li>Sanitizes HTML tags</li> <li>Handles nested objects</li> <li>Preserves non-string values</li> </ol> <pre><code>it('should sanitize HTML tags', () =&gt; {\n  const input = '&lt;script&gt;alert(\"xss\")&lt;/script&gt;Hello';\n  const sanitized = sanitizeValue(input);\n  expect(sanitized).toBe('&amp;lt;script&amp;gt;alert(&amp;quot;xss&amp;quot;)&amp;lt;/script&amp;gt;Hello');\n});\n</code></pre> <ol> <li>Security Headers (<code>applySecurityHeaders</code>)</li> <li>Verifies correct security header application</li> <li>Checks CSP, frame options, and other security headers</li> </ol> <pre><code>it('should apply security headers', () =&gt; {\n  const mockRequest = new Request('http://localhost');\n  const headers = applySecurityHeaders(mockRequest);\n  expect(headers['content-security-policy']).toBeDefined();\n  expect(headers['x-frame-options']).toBeDefined();\n});\n</code></pre> <ol> <li>Error Handling (<code>handleError</code>)</li> <li>Tests error responses in production and development modes</li> <li>Verifies error message and stack trace inclusion</li> </ol> <pre><code>it('should include error details in development mode', () =&gt; {\n  const error = new Error('Test error');\n  const result = handleError(error, 'development');\n  expect(result).toEqual({\n    error: true,\n    message: 'Internal server error',\n    error: 'Test error',\n    stack: expect.any(String)\n  });\n});\n</code></pre>"},{"location":"testing/#testing-philosophy","title":"Testing Philosophy","text":"<ul> <li>Isolation: Each utility function is tested independently</li> <li>Comprehensive Coverage: Multiple scenarios for each function</li> <li>Predictable Behavior: Clear expectations for input and output</li> <li>Error Handling: Robust testing of error conditions</li> </ul>"},{"location":"testing/#best-practices","title":"Best Practices","text":"<ol> <li>Use minimal, focused test cases</li> <li>Test both successful and failure scenarios</li> <li>Verify input sanitization and security measures</li> <li>Mock external dependencies when necessary</li> </ol>"},{"location":"testing/#running-security-tests","title":"Running Security Tests","text":"<pre><code># Run all tests\nbun test\n\n# Run specific security tests\nbun test __tests__/security/\n</code></pre>"},{"location":"testing/#continuous-improvement","title":"Continuous Improvement","text":"<ul> <li>Regularly update test cases</li> <li>Add new test scenarios as security requirements evolve</li> <li>Perform periodic security audits</li> </ul>"},{"location":"testing/#best-practices_1","title":"Best Practices","text":"<ol> <li>Isolation: Each test should be independent and not rely on the state of other tests.</li> <li>Mocking: Use the provided mock utilities for external dependencies.</li> <li>Cleanup: Clean up any resources or state modifications in <code>afterEach</code> or <code>afterAll</code> hooks.</li> <li>Descriptive Names: Use clear, descriptive test names that explain the expected behavior.</li> <li>Assertions: Make specific, meaningful assertions rather than general ones.</li> <li>Setup: Use <code>beforeEach</code> for common test setup to avoid repetition.</li> <li>Error Cases: Test both success and error cases for complete coverage.</li> </ol>"},{"location":"testing/#coverage_1","title":"Coverage","text":"<p>The project aims for high test coverage, particularly focusing on: - Security-critical code paths - API endpoints - Data validation - Error handling - Event broadcasting</p> <p>Run coverage reports using: <pre><code>bun test --coverage\n</code></pre></p>"},{"location":"testing/#debugging-tests","title":"Debugging Tests","text":"<p>To debug tests: 1. Set <code>DEBUG=true</code> to enable console output during tests 2. Use the <code>--watch</code> flag for development 3. Add <code>console.log()</code> statements (they're only shown when DEBUG is true) 4. Use the test utilities' debugging helpers</p>"},{"location":"testing/#advanced-debugging_1","title":"Advanced Debugging","text":"<ol> <li> <p>Using Node Inspector:    <pre><code># Start tests with inspector\nbun test --inspect\n\n# Start tests with inspector and break on first line\nbun test --inspect-brk\n</code></pre></p> </li> <li> <p>Using VS Code:    <pre><code>// .vscode/launch.json\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"bun\",\n      \"request\": \"launch\",\n      \"name\": \"Debug Tests\",\n      \"program\": \"${workspaceFolder}/node_modules/bun/bin/bun\",\n      \"args\": [\"test\", \"${file}\"],\n      \"cwd\": \"${workspaceFolder}\",\n      \"env\": { \"DEBUG\": \"true\" }\n    }\n  ]\n}\n</code></pre></p> </li> <li> <p>Test Isolation:    To run a single test in isolation:    <pre><code>describe.only(\"specific test suite\", () =&gt; {\n  it.only(\"specific test case\", () =&gt; {\n    // Only this test will run\n  });\n});\n</code></pre></p> </li> </ol>"},{"location":"testing/#contributing","title":"Contributing","text":"<p>When contributing new code: 1. Add tests for new features 2. Ensure existing tests pass 3. Maintain or improve coverage 4. Follow the existing test patterns and naming conventions 5. Document any new test utilities or patterns </p>"},{"location":"testing/#coverage-requirements","title":"Coverage Requirements","text":"<p>The project maintains strict coverage requirements:</p> <ul> <li>Minimum overall coverage: 80%</li> <li>Critical paths (security, API, data validation): 90%</li> <li>New features must include tests with &gt;= 85% coverage</li> </ul> <p>Coverage reports are generated in multiple formats: - Console summary - HTML report (./coverage/index.html) - LCOV report (./coverage/lcov.info)</p> <p>To view detailed coverage: <pre><code># Generate and open coverage report\nbun test --coverage &amp;&amp; open coverage/index.html\n</code></pre></p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide \ud83d\udd27","text":"<p>This guide helps you diagnose and resolve common issues with MCP Server.</p>"},{"location":"troubleshooting/#quick-diagnostics","title":"Quick Diagnostics","text":""},{"location":"troubleshooting/#health-check","title":"Health Check","text":"<p>First, verify the server's health:</p> <pre><code>curl http://localhost:3000/health\n</code></pre> <p>Expected response: <pre><code>{\n  \"status\": \"healthy\",\n  \"version\": \"1.0.0\",\n  \"uptime\": 3600,\n  \"homeAssistant\": {\n    \"connected\": true,\n    \"version\": \"2024.1.0\"\n  }\n}\n</code></pre></p>"},{"location":"troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"troubleshooting/#1-connection-issues","title":"1. Connection Issues","text":""},{"location":"troubleshooting/#cannot-connect-to-mcp-server","title":"Cannot Connect to MCP Server","text":"<p>Symptoms: - Server not responding - Connection refused errors - Timeout errors</p> <p>Solutions:</p> <ol> <li> <p>Check if the server is running:    <pre><code># For Docker installation\ndocker compose ps\n\n# For manual installation\nps aux | grep mcp\n</code></pre></p> </li> <li> <p>Verify port availability:    <pre><code># Check if port is in use\nnetstat -tuln | grep 3000\n</code></pre></p> </li> <li> <p>Check logs:    <pre><code># Docker logs\ndocker compose logs mcp\n\n# Manual installation logs\nbun run dev\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#home-assistant-connection-failed","title":"Home Assistant Connection Failed","text":"<p>Symptoms: - \"Connection Error\" in health check - Cannot control devices - State updates not working</p> <p>Solutions:</p> <ol> <li> <p>Verify Home Assistant URL and token in <code>.env</code>:    <pre><code>HA_URL=http://homeassistant:8123\nHA_TOKEN=your_long_lived_access_token\n</code></pre></p> </li> <li> <p>Test Home Assistant connection:    <pre><code>curl -H \"Authorization: Bearer YOUR_HA_TOKEN\" \\\n     http://your-homeassistant:8123/api/\n</code></pre></p> </li> <li> <p>Check network connectivity:    <pre><code># For Docker setup\ndocker compose exec mcp ping homeassistant\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#2-authentication-issues","title":"2. Authentication Issues","text":""},{"location":"troubleshooting/#invalid-token","title":"Invalid Token","text":"<p>Symptoms: - 401 Unauthorized responses - \"Invalid token\" errors</p> <p>Solutions:</p> <ol> <li> <p>Generate a new token:    <pre><code>curl -X POST http://localhost:3000/auth/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"your_username\", \"password\": \"your_password\"}'\n</code></pre></p> </li> <li> <p>Verify token format:    <pre><code>// Token should be in format:\nAuthorization: Bearer eyJhbGciOiJIUzI1NiIs...\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#rate-limiting","title":"Rate Limiting","text":"<p>Symptoms: - 429 Too Many Requests - \"Rate limit exceeded\" errors</p> <p>Solutions:</p> <ol> <li> <p>Check current rate limit status:    <pre><code>curl -I http://localhost:3000/api/state\n</code></pre></p> </li> <li> <p>Adjust rate limits in configuration:    <pre><code>security:\n  rateLimit: 100  # Increase if needed\n  rateLimitWindow: 60000  # Window in milliseconds\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#3-real-time-updates-issues","title":"3. Real-time Updates Issues","text":""},{"location":"troubleshooting/#sse-connection-drops","title":"SSE Connection Drops","text":"<p>Symptoms: - Frequent disconnections - Missing state updates - EventSource errors</p> <p>Solutions:</p> <ol> <li> <p>Implement proper reconnection logic:    <pre><code>class SSEClient {\n    constructor() {\n        this.connect();\n    }\n\n    connect() {\n        this.eventSource = new EventSource('/subscribe_events');\n        this.eventSource.onerror = this.handleError.bind(this);\n    }\n\n    handleError(error) {\n        console.error('SSE Error:', error);\n        this.eventSource.close();\n        setTimeout(() =&gt; this.connect(), 1000);\n    }\n}\n</code></pre></p> </li> <li> <p>Check network stability:    <pre><code># Monitor connection stability\nping -c 100 localhost\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#4-performance-issues","title":"4. Performance Issues","text":""},{"location":"troubleshooting/#high-latency","title":"High Latency","text":"<p>Symptoms: - Slow response times - Command execution delays - UI lag</p> <p>Solutions:</p> <ol> <li> <p>Enable Redis caching:    <pre><code>REDIS_ENABLED=true\nREDIS_URL=redis://localhost:6379\n</code></pre></p> </li> <li> <p>Monitor system resources:    <pre><code># Check CPU and memory usage\ndocker stats\n\n# Or for manual installation\ntop -p $(pgrep -f mcp)\n</code></pre></p> </li> <li> <p>Optimize database queries and caching:    <pre><code>// Use batch operations\nconst results = await Promise.all([\n    cache.get('key1'),\n    cache.get('key2')\n]);\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#5-device-control-issues","title":"5. Device Control Issues","text":""},{"location":"troubleshooting/#commands-not-executing","title":"Commands Not Executing","text":"<p>Symptoms: - Commands appear successful but no device response - Inconsistent device states - Error messages from Home Assistant</p> <p>Solutions:</p> <ol> <li> <p>Verify device availability:    <pre><code>curl http://localhost:3000/api/state/light.living_room\n</code></pre></p> </li> <li> <p>Check command syntax:    <pre><code># Test basic command\ncurl -X POST http://localhost:3000/api/command \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"command\": \"Turn on living room lights\"}'\n</code></pre></p> </li> <li> <p>Review Home Assistant logs:    <pre><code>docker compose exec homeassistant journalctl -f\n</code></pre></p> </li> </ol>"},{"location":"troubleshooting/#debugging-tools","title":"Debugging Tools","text":""},{"location":"troubleshooting/#log-analysis","title":"Log Analysis","text":"<p>Enable debug logging:</p> <pre><code>LOG_LEVEL=debug\nDEBUG=mcp:*\n</code></pre>"},{"location":"troubleshooting/#network-debugging","title":"Network Debugging","text":"<p>Monitor network traffic:</p> <pre><code># TCP dump for API traffic\ntcpdump -i any port 3000 -w debug.pcap\n</code></pre>"},{"location":"troubleshooting/#performance-profiling","title":"Performance Profiling","text":"<p>Enable performance monitoring:</p> <pre><code>ENABLE_METRICS=true\nMETRICS_PORT=9090\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you're still experiencing issues:</p> <ol> <li>Check the GitHub Issues</li> <li>Search Discussions</li> <li>Create a new issue with:</li> <li>Detailed description</li> <li>Logs</li> <li>Configuration (sanitized)</li> <li>Steps to reproduce</li> </ol>"},{"location":"troubleshooting/#maintenance","title":"Maintenance","text":""},{"location":"troubleshooting/#regular-health-checks","title":"Regular Health Checks","text":"<p>Run periodic health checks:</p> <pre><code># Create a cron job\n*/5 * * * * curl -f http://localhost:3000/health || notify-admin\n</code></pre>"},{"location":"troubleshooting/#log-rotation","title":"Log Rotation","text":"<p>Configure log rotation:</p> <pre><code>logging:\n  maxSize: \"100m\"\n  maxFiles: \"7d\"\n  compress: true\n</code></pre>"},{"location":"troubleshooting/#backup-configuration","title":"Backup Configuration","text":"<p>Regularly backup your configuration:</p> <pre><code># Backup script\ntar -czf mcp-backup-$(date +%Y%m%d).tar.gz \\\n    .env \\\n    config/ \\\n    data/\n</code></pre>"},{"location":"troubleshooting/#faq","title":"FAQ","text":""},{"location":"troubleshooting/#general-questions","title":"General Questions","text":""},{"location":"troubleshooting/#q-what-is-mcp-server","title":"Q: What is MCP Server?","text":"<p>A: MCP Server is a bridge between Home Assistant and Language Learning Models, enabling natural language control and automation of your smart home devices.</p>"},{"location":"troubleshooting/#q-what-are-the-system-requirements","title":"Q: What are the system requirements?","text":"<p>A: MCP Server requires: - Node.js 16 or higher - Home Assistant instance - 1GB RAM minimum - 1GB disk space</p>"},{"location":"troubleshooting/#q-how-do-i-update-mcp-server","title":"Q: How do I update MCP Server?","text":"<p>A: For Docker installation: <pre><code>docker compose pull\ndocker compose up -d\n</code></pre> For manual installation: <pre><code>git pull\nbun install\nbun run build\n</code></pre></p>"},{"location":"troubleshooting/#integration-questions","title":"Integration Questions","text":""},{"location":"troubleshooting/#q-can-i-use-mcp-server-with-any-home-assistant-instance","title":"Q: Can I use MCP Server with any Home Assistant instance?","text":"<p>A: Yes, MCP Server works with any Home Assistant instance that has the REST API enabled and a valid long-lived access token.</p>"},{"location":"troubleshooting/#q-does-mcp-server-support-all-home-assistant-integrations","title":"Q: Does MCP Server support all Home Assistant integrations?","text":"<p>A: MCP Server supports all Home Assistant devices and services that are accessible via the REST API.</p>"},{"location":"troubleshooting/#security-questions","title":"Security Questions","text":""},{"location":"troubleshooting/#q-is-my-home-assistant-token-secure","title":"Q: Is my Home Assistant token secure?","text":"<p>A: Yes, your Home Assistant token is stored securely and only used for authenticated communication between MCP Server and your Home Assistant instance.</p>"},{"location":"troubleshooting/#q-can-i-use-mcp-server-remotely","title":"Q: Can I use MCP Server remotely?","text":"<p>A: Yes, but we recommend using a secure connection (HTTPS) and proper authentication when exposing MCP Server to the internet.</p>"},{"location":"troubleshooting/#troubleshooting-questions","title":"Troubleshooting Questions","text":""},{"location":"troubleshooting/#q-why-are-my-device-states-not-updating","title":"Q: Why are my device states not updating?","text":"<p>A: Check: 1. Home Assistant connection 2. WebSocket connection status 3. Device availability in Home Assistant 4. Network connectivity</p>"},{"location":"troubleshooting/#q-why-are-my-commands-not-working","title":"Q: Why are my commands not working?","text":"<p>A: Verify: 1. Command syntax 2. Device availability 3. User permissions 4. Home Assistant API access </p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide explains how to use the Home Assistant MCP Server for basic device management and integration.</p>"},{"location":"usage/#basic-setup","title":"Basic Setup","text":"<ol> <li>Starting the Server:</li> <li>Development mode: <code>bun run dev</code></li> <li> <p>Production mode: <code>bun run start</code></p> </li> <li> <p>Accessing the Server:</p> </li> <li>Default URL: <code>http://localhost:3000</code></li> <li>Ensure Home Assistant credentials are configured in <code>.env</code></li> </ol>"},{"location":"usage/#device-control","title":"Device Control","text":""},{"location":"usage/#rest-api-interactions","title":"REST API Interactions","text":"<p>Basic device control can be performed via the REST API:</p> <pre><code>// Turn on a light\nfetch('http://localhost:3000/api/control', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n    'Authorization': `Bearer ${token}`\n  },\n  body: JSON.stringify({\n    entity_id: 'light.living_room',\n    command: 'turn_on',\n    parameters: { brightness: 50 }\n  })\n});\n</code></pre>"},{"location":"usage/#supported-commands","title":"Supported Commands","text":"<ul> <li><code>turn_on</code></li> <li><code>turn_off</code></li> <li><code>toggle</code></li> <li><code>set_brightness</code></li> </ul>"},{"location":"usage/#supported-entities","title":"Supported Entities","text":"<ul> <li>Lights</li> <li>Switches</li> <li>Climate controls</li> <li>Media players</li> </ul>"},{"location":"usage/#real-time-updates","title":"Real-Time Updates","text":""},{"location":"usage/#websocket-connection","title":"WebSocket Connection","text":"<p>Subscribe to real-time device state changes:</p> <pre><code>const ws = new WebSocket('ws://localhost:3000/events');\nws.onmessage = (event) =&gt; {\n  const deviceUpdate = JSON.parse(event.data);\n  console.log('Device state changed:', deviceUpdate);\n};\n</code></pre>"},{"location":"usage/#authentication","title":"Authentication","text":"<p>All API requests require a valid JWT token in the Authorization header.</p>"},{"location":"usage/#limitations","title":"Limitations","text":"<ul> <li>Basic device control only</li> <li>Limited error handling</li> <li>Minimal third-party integrations</li> </ul>"},{"location":"usage/#troubleshooting","title":"Troubleshooting","text":"<ol> <li>Verify Home Assistant connection</li> <li>Check JWT token validity</li> <li>Ensure correct entity IDs</li> <li>Review server logs for detailed errors</li> </ol>"},{"location":"usage/#configuration","title":"Configuration","text":"<p>Configure the server using environment variables in <code>.env</code>:</p> <pre><code>HA_URL=http://homeassistant:8123\nHA_TOKEN=your_home_assistant_token\nJWT_SECRET=your_jwt_secret\n</code></pre>"},{"location":"usage/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Documentation</li> <li>Check Troubleshooting Guide</li> <li>Review Contributing Guidelines </li> </ul>"},{"location":"api/","title":"API Documentation \ud83d\udcda","text":"<p>Welcome to the MCP Server API documentation. This guide covers all available endpoints, authentication methods, and integration patterns.</p>"},{"location":"api/#api-overview","title":"API Overview","text":"<p>The MCP Server provides several API categories:</p> <ol> <li>Core API - Basic device control and state management</li> <li>SSE API - Real-time event subscriptions</li> <li>Scene API - Scene management and automation</li> <li>Voice API - Natural language command processing</li> </ol>"},{"location":"api/#authentication","title":"Authentication","text":"<p>All API endpoints require authentication using JWT tokens:</p> <pre><code># Include the token in your requests\ncurl -H \"Authorization: Bearer YOUR_JWT_TOKEN\" http://localhost:3000/api/state\n</code></pre> <p>To obtain a token:</p> <pre><code>curl -X POST http://localhost:3000/auth/token \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"username\": \"your_username\", \"password\": \"your_password\"}'\n</code></pre>"},{"location":"api/#core-endpoints","title":"Core Endpoints","text":""},{"location":"api/#device-state","title":"Device State","text":"<pre><code>GET /api/state\n</code></pre> <p>Retrieve the current state of all devices:</p> <pre><code>curl http://localhost:3000/api/state\n</code></pre> <p>Response: <pre><code>{\n  \"devices\": [\n    {\n      \"id\": \"light.living_room\",\n      \"state\": \"on\",\n      \"attributes\": {\n        \"brightness\": 255,\n        \"color_temp\": 370\n      }\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/#command-execution","title":"Command Execution","text":"<pre><code>POST /api/command\n</code></pre> <p>Execute a natural language command:</p> <pre><code>curl -X POST http://localhost:3000/api/command \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"command\": \"Turn on the kitchen lights\"}'\n</code></pre> <p>Response: <pre><code>{\n  \"success\": true,\n  \"action\": \"turn_on\",\n  \"device\": \"light.kitchen\",\n  \"message\": \"Kitchen lights turned on\"\n}\n</code></pre></p>"},{"location":"api/#real-time-events","title":"Real-Time Events","text":""},{"location":"api/#event-subscription","title":"Event Subscription","text":"<pre><code>GET /subscribe_events\n</code></pre> <p>Subscribe to device state changes:</p> <pre><code>const eventSource = new EventSource('http://localhost:3000/subscribe_events?token=YOUR_TOKEN');\n\neventSource.onmessage = (event) =&gt; {\n    const data = JSON.parse(event.data);\n    console.log('State changed:', data);\n};\n</code></pre>"},{"location":"api/#filtered-subscriptions","title":"Filtered Subscriptions","text":"<p>Subscribe to specific device types:</p> <pre><code>GET /subscribe_events?domain=light\nGET /subscribe_events?entity_id=light.living_room\n</code></pre>"},{"location":"api/#scene-management","title":"Scene Management","text":""},{"location":"api/#create-scene","title":"Create Scene","text":"<pre><code>POST /api/scene\n</code></pre> <p>Create a new scene:</p> <pre><code>curl -X POST http://localhost:3000/api/scene \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"Movie Night\",\n    \"actions\": [\n      {\"device\": \"light.living_room\", \"action\": \"dim\", \"value\": 20},\n      {\"device\": \"media_player.tv\", \"action\": \"on\"}\n    ]\n  }'\n</code></pre>"},{"location":"api/#activate-scene","title":"Activate Scene","text":"<pre><code>POST /api/scene/activate\n</code></pre> <p>Activate an existing scene:</p> <pre><code>curl -X POST http://localhost:3000/api/scene/activate \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"name\": \"Movie Night\"}'\n</code></pre>"},{"location":"api/#error-handling","title":"Error Handling","text":"<p>The API uses standard HTTP status codes:</p> <ul> <li><code>200</code> - Success</li> <li><code>400</code> - Bad Request</li> <li><code>401</code> - Unauthorized</li> <li><code>404</code> - Not Found</li> <li><code>500</code> - Server Error</li> </ul> <p>Error responses include detailed messages:</p> <pre><code>{\n  \"error\": true,\n  \"message\": \"Device not found\",\n  \"code\": \"DEVICE_NOT_FOUND\",\n  \"details\": {\n    \"device_id\": \"light.nonexistent\"\n  }\n}\n</code></pre>"},{"location":"api/#rate-limiting","title":"Rate Limiting","text":"<p>API requests are rate-limited to prevent abuse:</p> <pre><code>X-RateLimit-Limit: 100\nX-RateLimit-Remaining: 99\nX-RateLimit-Reset: 1640995200\n</code></pre> <p>When exceeded, returns <code>429 Too Many Requests</code>:</p> <pre><code>{\n  \"error\": true,\n  \"message\": \"Rate limit exceeded\",\n  \"reset\": 1640995200\n}\n</code></pre>"},{"location":"api/#websocket-api","title":"WebSocket API","text":"<p>For bi-directional communication:</p> <pre><code>const ws = new WebSocket('ws://localhost:3000/ws');\n\nws.onmessage = (event) =&gt; {\n    const data = JSON.parse(event.data);\n    console.log('Received:', data);\n};\n\nws.send(JSON.stringify({\n    type: 'command',\n    payload: {\n        command: 'Turn on lights'\n    }\n}));\n</code></pre>"},{"location":"api/#api-versioning","title":"API Versioning","text":"<p>The current API version is v1. Include the version in the URL:</p> <pre><code>/api/v1/state\n/api/v1/command\n</code></pre>"},{"location":"api/#further-reading","title":"Further Reading","text":"<ul> <li>SSE API Details - In-depth SSE documentation</li> <li>Core Functions - Detailed endpoint documentation</li> <li>Architecture Overview - System design details</li> <li>Troubleshooting - Common issues and solutions </li> </ul>"},{"location":"api/core/","title":"Core Functions API \ud83d\udd27","text":"<p>The Core Functions API provides the fundamental operations for interacting with Home Assistant devices and services through MCP Server.</p>"},{"location":"api/core/#device-control","title":"Device Control","text":""},{"location":"api/core/#get-device-state","title":"Get Device State","text":"<p>Retrieve the current state of devices.</p> <pre><code>GET /api/state\nGET /api/state/{entity_id}\n</code></pre> <p>Parameters: - <code>entity_id</code> (optional): Specific device ID to query</p> <pre><code># Get all states\ncurl http://localhost:3000/api/state\n\n# Get specific device state\ncurl http://localhost:3000/api/state/light.living_room\n</code></pre> <p>Response: <pre><code>{\n  \"entity_id\": \"light.living_room\",\n  \"state\": \"on\",\n  \"attributes\": {\n    \"brightness\": 255,\n    \"color_temp\": 370,\n    \"friendly_name\": \"Living Room Light\"\n  },\n  \"last_changed\": \"2024-01-20T15:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/core/#control-device","title":"Control Device","text":"<p>Execute device commands.</p> <pre><code>POST /api/device/control\n</code></pre> <p>Request body: <pre><code>{\n  \"entity_id\": \"light.living_room\",\n  \"action\": \"turn_on\",\n  \"parameters\": {\n    \"brightness\": 200,\n    \"color_temp\": 400\n  }\n}\n</code></pre></p> <p>Available actions: - <code>turn_on</code> - <code>turn_off</code> - <code>toggle</code> - <code>set_value</code></p> <p>Example with curl: <pre><code>curl -X POST http://localhost:3000/api/device/control \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  -d '{\n    \"entity_id\": \"light.living_room\",\n    \"action\": \"turn_on\",\n    \"parameters\": {\n      \"brightness\": 200\n    }\n  }'\n</code></pre></p>"},{"location":"api/core/#natural-language-commands","title":"Natural Language Commands","text":""},{"location":"api/core/#execute-command","title":"Execute Command","text":"<p>Process natural language commands.</p> <pre><code>POST /api/command\n</code></pre> <p>Request body: <pre><code>{\n  \"command\": \"Turn on the living room lights and set them to 50% brightness\"\n}\n</code></pre></p> <p>Example usage: <pre><code>curl -X POST http://localhost:3000/api/command \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\" \\\n  -d '{\n    \"command\": \"Turn on the living room lights and set them to 50% brightness\"\n  }'\n</code></pre></p> <p>Response: <pre><code>{\n  \"success\": true,\n  \"actions\": [\n    {\n      \"entity_id\": \"light.living_room\",\n      \"action\": \"turn_on\",\n      \"parameters\": {\n        \"brightness\": 127\n      },\n      \"status\": \"completed\"\n    }\n  ],\n  \"message\": \"Command executed successfully\"\n}\n</code></pre></p>"},{"location":"api/core/#scene-management","title":"Scene Management","text":""},{"location":"api/core/#create-scene","title":"Create Scene","text":"<p>Define a new scene with multiple actions.</p> <pre><code>POST /api/scene\n</code></pre> <p>Request body: <pre><code>{\n  \"name\": \"Movie Night\",\n  \"description\": \"Perfect lighting for movie watching\",\n  \"actions\": [\n    {\n      \"entity_id\": \"light.living_room\",\n      \"action\": \"turn_on\",\n      \"parameters\": {\n        \"brightness\": 50,\n        \"color_temp\": 500\n      }\n    },\n    {\n      \"entity_id\": \"cover.living_room\",\n      \"action\": \"close\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"api/core/#activate-scene","title":"Activate Scene","text":"<p>Trigger a predefined scene.</p> <pre><code>POST /api/scene/{scene_name}/activate\n</code></pre> <p>Example: <pre><code>curl -X POST http://localhost:3000/api/scene/movie_night/activate \\\n  -H \"Authorization: Bearer YOUR_JWT_TOKEN\"\n</code></pre></p>"},{"location":"api/core/#groups","title":"Groups","text":""},{"location":"api/core/#create-device-group","title":"Create Device Group","text":"<p>Create a group of devices for collective control.</p> <pre><code>POST /api/group\n</code></pre> <p>Request body: <pre><code>{\n  \"name\": \"Living Room\",\n  \"entities\": [\n    \"light.living_room_main\",\n    \"light.living_room_accent\",\n    \"switch.living_room_fan\"\n  ]\n}\n</code></pre></p>"},{"location":"api/core/#control-group","title":"Control Group","text":"<p>Control multiple devices in a group.</p> <pre><code>POST /api/group/{group_name}/control\n</code></pre> <p>Request body: <pre><code>{\n  \"action\": \"turn_off\"\n}\n</code></pre></p>"},{"location":"api/core/#system-operations","title":"System Operations","text":""},{"location":"api/core/#health-check","title":"Health Check","text":"<p>Check server status and connectivity.</p> <pre><code>GET /health\n</code></pre> <p>Response: <pre><code>{\n  \"status\": \"healthy\",\n  \"version\": \"1.0.0\",\n  \"uptime\": 3600,\n  \"homeAssistant\": {\n    \"connected\": true,\n    \"version\": \"2024.1.0\"\n  }\n}\n</code></pre></p>"},{"location":"api/core/#configuration","title":"Configuration","text":"<p>Get current server configuration.</p> <pre><code>GET /api/config\n</code></pre> <p>Response: <pre><code>{\n  \"server\": {\n    \"port\": 3000,\n    \"host\": \"0.0.0.0\",\n    \"version\": \"1.0.0\"\n  },\n  \"homeAssistant\": {\n    \"url\": \"http://homeassistant:8123\",\n    \"connected\": true\n  },\n  \"features\": {\n    \"nlp\": true,\n    \"scenes\": true,\n    \"groups\": true\n  }\n}\n</code></pre></p>"},{"location":"api/core/#error-handling","title":"Error Handling","text":"<p>All endpoints follow standard HTTP status codes and return detailed error messages:</p> <pre><code>{\n  \"error\": true,\n  \"code\": \"INVALID_ENTITY\",\n  \"message\": \"Device 'light.nonexistent' not found\",\n  \"details\": {\n    \"entity_id\": \"light.nonexistent\",\n    \"available_entities\": [\n      \"light.living_room\",\n      \"light.kitchen\"\n    ]\n  }\n}\n</code></pre> <p>Common error codes: - <code>INVALID_ENTITY</code>: Device not found - <code>INVALID_ACTION</code>: Unsupported action - <code>INVALID_PARAMETERS</code>: Invalid command parameters - <code>AUTHENTICATION_ERROR</code>: Invalid or missing token - <code>CONNECTION_ERROR</code>: Home Assistant connection issue</p>"},{"location":"api/core/#typescript-interfaces","title":"TypeScript Interfaces","text":"<pre><code>interface DeviceState {\n  entity_id: string;\n  state: string;\n  attributes: Record&lt;string, any&gt;;\n  last_changed: string;\n}\n\ninterface DeviceCommand {\n  entity_id: string;\n  action: 'turn_on' | 'turn_off' | 'toggle' | 'set_value';\n  parameters?: Record&lt;string, any&gt;;\n}\n\ninterface Scene {\n  name: string;\n  description?: string;\n  actions: DeviceCommand[];\n}\n\ninterface Group {\n  name: string;\n  entities: string[];\n}\n</code></pre>"},{"location":"api/core/#related-resources","title":"Related Resources","text":"<ul> <li>API Overview</li> <li>SSE API</li> <li>Architecture</li> <li>Examples </li> </ul>"},{"location":"api/sse/","title":"Server-Sent Events (SSE) API \ud83d\udce1","text":"<p>The SSE API provides real-time updates about device states and events from your Home Assistant setup. This guide covers how to use and implement SSE connections in your applications.</p>"},{"location":"api/sse/#overview","title":"Overview","text":"<p>Server-Sent Events (SSE) is a standard that enables servers to push real-time updates to clients over HTTP connections. MCP Server uses SSE to provide:</p> <ul> <li>Real-time device state updates</li> <li>Event notifications</li> <li>System status changes</li> <li>Command execution results</li> </ul>"},{"location":"api/sse/#basic-usage","title":"Basic Usage","text":""},{"location":"api/sse/#establishing-a-connection","title":"Establishing a Connection","text":"<p>Create an EventSource connection to receive updates:</p> <pre><code>const eventSource = new EventSource('http://localhost:3000/subscribe_events?token=YOUR_JWT_TOKEN');\n\neventSource.onmessage = (event) =&gt; {\n    const data = JSON.parse(event.data);\n    console.log('Received update:', data);\n};\n</code></pre>"},{"location":"api/sse/#connection-states","title":"Connection States","text":"<p>Handle different connection states:</p> <pre><code>eventSource.onopen = () =&gt; {\n    console.log('Connection established');\n};\n\neventSource.onerror = (error) =&gt; {\n    console.error('Connection error:', error);\n    // Implement reconnection logic if needed\n};\n</code></pre>"},{"location":"api/sse/#event-types","title":"Event Types","text":""},{"location":"api/sse/#device-state-events","title":"Device State Events","text":"<p>Subscribe to all device state changes:</p> <pre><code>const stateEvents = new EventSource('http://localhost:3000/subscribe_events?type=state');\n\nstateEvents.onmessage = (event) =&gt; {\n    const state = JSON.parse(event.data);\n    console.log('Device state changed:', state);\n};\n</code></pre> <p>Example state event: <pre><code>{\n  \"type\": \"state_changed\",\n  \"entity_id\": \"light.living_room\",\n  \"state\": \"on\",\n  \"attributes\": {\n    \"brightness\": 255,\n    \"color_temp\": 370\n  },\n  \"timestamp\": \"2024-01-20T15:30:00Z\"\n}\n</code></pre></p>"},{"location":"api/sse/#filtered-subscriptions","title":"Filtered Subscriptions","text":""},{"location":"api/sse/#by-domain","title":"By Domain","text":"<p>Subscribe to specific device types:</p> <pre><code>// Subscribe to only light events\nconst lightEvents = new EventSource('http://localhost:3000/subscribe_events?domain=light');\n\n// Subscribe to multiple domains\nconst multiEvents = new EventSource('http://localhost:3000/subscribe_events?domain=light,switch,sensor');\n</code></pre>"},{"location":"api/sse/#by-entity-id","title":"By Entity ID","text":"<p>Subscribe to specific devices:</p> <pre><code>// Single entity\nconst livingRoomLight = new EventSource(\n    'http://localhost:3000/subscribe_events?entity_id=light.living_room'\n);\n\n// Multiple entities\nconst kitchenDevices = new EventSource(\n    'http://localhost:3000/subscribe_events?entity_id=light.kitchen,switch.coffee_maker'\n);\n</code></pre>"},{"location":"api/sse/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api/sse/#connection-management","title":"Connection Management","text":"<p>Implement robust connection handling:</p> <pre><code>class SSEManager {\n    constructor(url, options = {}) {\n        this.url = url;\n        this.options = {\n            maxRetries: 3,\n            retryDelay: 1000,\n            ...options\n        };\n        this.retryCount = 0;\n        this.connect();\n    }\n\n    connect() {\n        this.eventSource = new EventSource(this.url);\n\n        this.eventSource.onopen = () =&gt; {\n            this.retryCount = 0;\n            console.log('Connected to SSE stream');\n        };\n\n        this.eventSource.onerror = (error) =&gt; {\n            this.handleError(error);\n        };\n\n        this.eventSource.onmessage = (event) =&gt; {\n            this.handleMessage(event);\n        };\n    }\n\n    handleError(error) {\n        console.error('SSE Error:', error);\n        this.eventSource.close();\n\n        if (this.retryCount &lt; this.options.maxRetries) {\n            this.retryCount++;\n            setTimeout(() =&gt; {\n                console.log(`Retrying connection (${this.retryCount}/${this.options.maxRetries})`);\n                this.connect();\n            }, this.options.retryDelay * this.retryCount);\n        }\n    }\n\n    handleMessage(event) {\n        try {\n            const data = JSON.parse(event.data);\n            // Handle the event data\n            console.log('Received:', data);\n        } catch (error) {\n            console.error('Error parsing SSE data:', error);\n        }\n    }\n\n    disconnect() {\n        if (this.eventSource) {\n            this.eventSource.close();\n        }\n    }\n}\n\n// Usage\nconst sseManager = new SSEManager('http://localhost:3000/subscribe_events?token=YOUR_TOKEN');\n</code></pre>"},{"location":"api/sse/#event-filtering","title":"Event Filtering","text":"<p>Filter events on the client side:</p> <pre><code>class EventFilter {\n    constructor(conditions) {\n        this.conditions = conditions;\n    }\n\n    matches(event) {\n        return Object.entries(this.conditions).every(([key, value]) =&gt; {\n            if (Array.isArray(value)) {\n                return value.includes(event[key]);\n            }\n            return event[key] === value;\n        });\n    }\n}\n\n// Usage\nconst filter = new EventFilter({\n    domain: ['light', 'switch'],\n    state: 'on'\n});\n\neventSource.onmessage = (event) =&gt; {\n    const data = JSON.parse(event.data);\n    if (filter.matches(data)) {\n        console.log('Matched event:', data);\n    }\n};\n</code></pre>"},{"location":"api/sse/#best-practices","title":"Best Practices","text":"<ol> <li>Authentication</li> <li>Always include authentication tokens</li> <li>Implement token refresh mechanisms</li> <li> <p>Handle authentication errors gracefully</p> </li> <li> <p>Error Handling</p> </li> <li>Implement progressive retry logic</li> <li>Log connection issues</li> <li> <p>Notify users of connection status</p> </li> <li> <p>Resource Management</p> </li> <li>Close EventSource connections when not needed</li> <li>Limit the number of concurrent connections</li> <li> <p>Use filtered subscriptions when possible</p> </li> <li> <p>Performance</p> </li> <li>Process events efficiently</li> <li>Batch UI updates</li> <li>Consider debouncing frequent updates</li> </ol>"},{"location":"api/sse/#common-issues","title":"Common Issues","text":""},{"location":"api/sse/#connection-drops","title":"Connection Drops","text":"<p>If the connection drops, the EventSource will automatically attempt to reconnect. You can customize this behavior:</p> <pre><code>eventSource.addEventListener('error', (error) =&gt; {\n    if (eventSource.readyState === EventSource.CLOSED) {\n        // Connection closed, implement custom retry logic\n    }\n});\n</code></pre>"},{"location":"api/sse/#memory-leaks","title":"Memory Leaks","text":"<p>Always clean up EventSource connections:</p> <pre><code>// In a React component\nuseEffect(() =&gt; {\n    const eventSource = new EventSource('http://localhost:3000/subscribe_events');\n\n    return () =&gt; {\n        eventSource.close(); // Cleanup on unmount\n    };\n}, []);\n</code></pre>"},{"location":"api/sse/#related-resources","title":"Related Resources","text":"<ul> <li>API Overview</li> <li>Core Functions</li> <li>WebSocket API</li> <li>Troubleshooting </li> </ul>"},{"location":"development/best-practices/","title":"Development Best Practices","text":"<p>This guide outlines the best practices for developing tools and features for the Home Assistant MCP.</p>"},{"location":"development/best-practices/#code-style","title":"Code Style","text":""},{"location":"development/best-practices/#typescript","title":"TypeScript","text":"<ol> <li>Use TypeScript for all new code</li> <li>Enable strict mode</li> <li>Use explicit types</li> <li>Avoid <code>any</code> type</li> <li>Use interfaces over types</li> <li>Document with JSDoc comments</li> </ol> <pre><code>/** \n * Represents a device in the system.\n * @interface\n */\ninterface Device {\n    /** Unique device identifier */\n    id: string;\n\n    /** Human-readable device name */\n    name: string;\n\n    /** Device state */\n    state: DeviceState;\n}\n</code></pre>"},{"location":"development/best-practices/#naming-conventions","title":"Naming Conventions","text":"<ol> <li>Use PascalCase for:</li> <li>Classes</li> <li>Interfaces</li> <li>Types</li> <li> <p>Enums</p> </li> <li> <p>Use camelCase for:</p> </li> <li>Variables</li> <li>Functions</li> <li>Methods</li> <li> <p>Properties</p> </li> <li> <p>Use UPPER_SNAKE_CASE for:</p> </li> <li>Constants</li> <li>Enum values</li> </ol> <pre><code>class DeviceManager {\n    private readonly DEFAULT_TIMEOUT = 5000;\n\n    async getDeviceState(deviceId: string): Promise&lt;DeviceState&gt; {\n        // Implementation\n    }\n}\n</code></pre>"},{"location":"development/best-practices/#architecture","title":"Architecture","text":""},{"location":"development/best-practices/#solid-principles","title":"SOLID Principles","text":"<ol> <li>Single Responsibility</li> <li>Each class/module has one job</li> <li> <p>Split complex functionality</p> </li> <li> <p>Open/Closed</p> </li> <li>Open for extension</li> <li> <p>Closed for modification</p> </li> <li> <p>Liskov Substitution</p> </li> <li>Subtypes must be substitutable</li> <li> <p>Use interfaces properly</p> </li> <li> <p>Interface Segregation</p> </li> <li>Keep interfaces focused</li> <li> <p>Split large interfaces</p> </li> <li> <p>Dependency Inversion</p> </li> <li>Depend on abstractions</li> <li>Use dependency injection</li> </ol>"},{"location":"development/best-practices/#example","title":"Example","text":"<pre><code>// Bad\nclass DeviceManager {\n    async getState() { /* ... */ }\n    async setState() { /* ... */ }\n    async sendNotification() { /* ... */ }  // Wrong responsibility\n}\n\n// Good\nclass DeviceManager {\n    constructor(\n        private notifier: NotificationService\n    ) {}\n\n    async getState() { /* ... */ }\n    async setState() { /* ... */ }\n}\n\nclass NotificationService {\n    async send() { /* ... */ }\n}\n</code></pre>"},{"location":"development/best-practices/#error-handling","title":"Error Handling","text":""},{"location":"development/best-practices/#best-practices","title":"Best Practices","text":"<ol> <li>Use custom error classes</li> <li>Include error codes</li> <li>Provide meaningful messages</li> <li>Include error context</li> <li>Handle async errors</li> <li>Log appropriately</li> </ol> <pre><code>class DeviceError extends Error {\n    constructor(\n        message: string,\n        public code: string,\n        public context: Record&lt;string, any&gt;\n    ) {\n        super(message);\n        this.name = 'DeviceError';\n    }\n}\n\ntry {\n    await device.connect();\n} catch (error) {\n    throw new DeviceError(\n        'Failed to connect to device',\n        'DEVICE_CONNECTION_ERROR',\n        { deviceId: device.id, attempt: 1 }\n    );\n}\n</code></pre>"},{"location":"development/best-practices/#testing","title":"Testing","text":""},{"location":"development/best-practices/#guidelines","title":"Guidelines","text":"<ol> <li>Write unit tests first</li> <li>Use meaningful descriptions</li> <li>Test edge cases</li> <li>Mock external dependencies</li> <li>Keep tests focused</li> <li>Use test fixtures</li> </ol> <pre><code>describe('DeviceManager', () =&gt; {\n    let manager: DeviceManager;\n    let mockDevice: jest.Mocked&lt;Device&gt;;\n\n    beforeEach(() =&gt; {\n        mockDevice = {\n            id: 'test_device',\n            getState: jest.fn()\n        };\n        manager = new DeviceManager(mockDevice);\n    });\n\n    it('should get device state', async () =&gt; {\n        mockDevice.getState.mockResolvedValue('on');\n        const state = await manager.getDeviceState();\n        expect(state).toBe('on');\n    });\n});\n</code></pre>"},{"location":"development/best-practices/#performance","title":"Performance","text":""},{"location":"development/best-practices/#optimization","title":"Optimization","text":"<ol> <li>Use caching</li> <li>Implement pagination</li> <li>Optimize database queries</li> <li>Use connection pooling</li> <li>Implement rate limiting</li> <li>Batch operations</li> </ol> <pre><code>class DeviceCache {\n    private cache = new Map&lt;string, CacheEntry&gt;();\n    private readonly TTL = 60000;  // 1 minute\n\n    async getDevice(id: string): Promise&lt;Device&gt; {\n        const cached = this.cache.get(id);\n        if (cached &amp;&amp; Date.now() - cached.timestamp &lt; this.TTL) {\n            return cached.device;\n        }\n\n        const device = await this.fetchDevice(id);\n        this.cache.set(id, {\n            device,\n            timestamp: Date.now()\n        });\n\n        return device;\n    }\n}\n</code></pre>"},{"location":"development/best-practices/#security","title":"Security","text":""},{"location":"development/best-practices/#guidelines_1","title":"Guidelines","text":"<ol> <li>Validate all input</li> <li>Use parameterized queries</li> <li>Implement rate limiting</li> <li>Use proper authentication</li> <li>Follow OWASP guidelines</li> <li>Sanitize output</li> </ol> <pre><code>class InputValidator {\n    static validateDeviceId(id: string): boolean {\n        return /^[a-zA-Z0-9_-]{1,64}$/.test(id);\n    }\n\n    static sanitizeOutput(data: any): any {\n        // Implement output sanitization\n        return data;\n    }\n}\n</code></pre>"},{"location":"development/best-practices/#documentation","title":"Documentation","text":""},{"location":"development/best-practices/#standards","title":"Standards","text":"<ol> <li>Use JSDoc comments</li> <li>Document interfaces</li> <li>Include examples</li> <li>Document errors</li> <li>Keep docs updated</li> <li>Use markdown</li> </ol> <pre><code>/**\n * Manages device operations.\n * @class\n */\nclass DeviceManager {\n    /**\n     * Gets the current state of a device.\n     * @param {string} deviceId - The device identifier.\n     * @returns {Promise&lt;DeviceState&gt;} The current device state.\n     * @throws {DeviceError} If device is not found or unavailable.\n     * @example\n     * const state = await deviceManager.getDeviceState('living_room_light');\n     */\n    async getDeviceState(deviceId: string): Promise&lt;DeviceState&gt; {\n        // Implementation\n    }\n}\n</code></pre>"},{"location":"development/best-practices/#logging","title":"Logging","text":""},{"location":"development/best-practices/#best-practices_1","title":"Best Practices","text":"<ol> <li>Use appropriate levels</li> <li>Include context</li> <li>Structure log data</li> <li>Handle sensitive data</li> <li>Implement rotation</li> <li>Use correlation IDs</li> </ol> <pre><code>class Logger {\n    info(message: string, context: Record&lt;string, any&gt;) {\n        console.log(JSON.stringify({\n            level: 'info',\n            message,\n            context,\n            timestamp: new Date().toISOString(),\n            correlationId: context.correlationId\n        }));\n    }\n}\n</code></pre>"},{"location":"development/best-practices/#version-control","title":"Version Control","text":""},{"location":"development/best-practices/#guidelines_2","title":"Guidelines","text":"<ol> <li>Use meaningful commits</li> <li>Follow branching strategy</li> <li>Write good PR descriptions</li> <li>Review code thoroughly</li> <li>Keep changes focused</li> <li>Use conventional commits</li> </ol> <pre><code># Good commit messages\ngit commit -m \"feat(device): add support for zigbee devices\"\ngit commit -m \"fix(api): handle timeout errors properly\"\n</code></pre>"},{"location":"development/best-practices/#see-also","title":"See Also","text":"<ul> <li>Tool Development Guide</li> <li>Interface Documentation</li> <li>Testing Guide </li> </ul>"},{"location":"development/development/","title":"Development Guide","text":"<p>This guide provides information for developers who want to contribute to or extend the Home Assistant MCP.</p>"},{"location":"development/development/#project-structure","title":"Project Structure","text":"<pre><code>homeassistant-mcp/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 __tests__/        # Test files\n\u2502   \u251c\u2500\u2500 __mocks__/       # Mock files\n\u2502   \u251c\u2500\u2500 api/           # API endpoints and route handlers\n\u2502   \u251c\u2500\u2500 config/        # Configuration management\n\u2502   \u251c\u2500\u2500 hass/         # Home Assistant integration\n\u2502   \u251c\u2500\u2500 interfaces/    # TypeScript interfaces\n\u2502   \u251c\u2500\u2500 mcp/          # MCP core functionality\n\u2502   \u251c\u2500\u2500 middleware/    # Express middleware\n\u2502   \u251c\u2500\u2500 routes/       # Route definitions\n\u2502   \u251c\u2500\u2500 security/     # Security utilities\n\u2502   \u251c\u2500\u2500 sse/          # Server-Sent Events handling\n\u2502   \u251c\u2500\u2500 tools/        # Tool implementations\n\u2502   \u251c\u2500\u2500 types/        # TypeScript type definitions\n\u2502   \u2514\u2500\u2500 utils/        # Utility functions\n\u251c\u2500\u2500 __tests__/        # Test files\n\u251c\u2500\u2500 docs/            # Documentation\n\u251c\u2500\u2500 dist/           # Compiled JavaScript\n\u2514\u2500\u2500 scripts/        # Build and utility scripts\n</code></pre>"},{"location":"development/development/#development-setup","title":"Development Setup","text":"<ol> <li> <p>Install dependencies:    <pre><code>npm install\n</code></pre></p> </li> <li> <p>Set up development environment:    <pre><code>cp .env.example .env.development\n</code></pre></p> </li> <li> <p>Start development server:    <pre><code>npm run dev\n</code></pre></p> </li> </ol>"},{"location":"development/development/#code-style","title":"Code Style","text":"<p>We follow these coding standards:</p> <ol> <li>TypeScript best practices</li> <li>Use strict type checking</li> <li>Avoid <code>any</code> types</li> <li> <p>Document complex types</p> </li> <li> <p>ESLint rules</p> </li> <li>Run <code>npm run lint</code> to check</li> <li> <p>Run <code>npm run lint:fix</code> to auto-fix</p> </li> <li> <p>Code formatting</p> </li> <li>Use Prettier</li> <li>Run <code>npm run format</code> to format code</li> </ol>"},{"location":"development/development/#testing","title":"Testing","text":"<ol> <li> <p>Unit tests:    <pre><code>npm run test\n</code></pre></p> </li> <li> <p>Integration tests:    <pre><code>npm run test:integration\n</code></pre></p> </li> <li> <p>Coverage report:    <pre><code>npm run test:coverage\n</code></pre></p> </li> </ol>"},{"location":"development/development/#creating-new-tools","title":"Creating New Tools","text":"<ol> <li> <p>Create a new file in <code>src/tools/</code>:    <pre><code>import { z } from 'zod';\nimport { Tool } from '../types';\n\nexport const myTool: Tool = {\n  name: 'my_tool',\n  description: 'Description of my tool',\n  parameters: z.object({\n    // Define parameters\n  }),\n  execute: async (params) =&gt; {\n    // Implement tool logic\n  }\n};\n</code></pre></p> </li> <li> <p>Add to <code>src/tools/index.ts</code></p> </li> <li>Create tests in <code>__tests__/tools/</code></li> <li>Add documentation in <code>docs/tools/</code></li> </ol>"},{"location":"development/development/#contributing","title":"Contributing","text":"<ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Write/update tests</li> <li>Update documentation</li> <li>Submit a pull request</li> </ol>"},{"location":"development/development/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure all tests pass</li> <li>Update documentation</li> <li>Update CHANGELOG.md</li> <li>Get review from maintainers</li> </ol>"},{"location":"development/development/#building","title":"Building","text":"<ol> <li> <p>Development build:    <pre><code>npm run build:dev\n</code></pre></p> </li> <li> <p>Production build:    <pre><code>npm run build\n</code></pre></p> </li> </ol>"},{"location":"development/development/#documentation","title":"Documentation","text":"<ol> <li>Update documentation for changes</li> <li>Follow documentation structure</li> <li>Include examples</li> <li>Update type definitions</li> </ol>"},{"location":"development/development/#debugging","title":"Debugging","text":"<ol> <li> <p>Development debugging:    <pre><code>npm run dev:debug\n</code></pre></p> </li> <li> <p>Test debugging:    <pre><code>npm run test:debug\n</code></pre></p> </li> <li> <p>VSCode launch configurations provided</p> </li> </ol>"},{"location":"development/development/#performance","title":"Performance","text":"<ol> <li>Follow performance best practices</li> <li>Use caching where appropriate</li> <li>Implement rate limiting</li> <li>Monitor memory usage</li> </ol>"},{"location":"development/development/#security","title":"Security","text":"<ol> <li>Follow security best practices</li> <li>Validate all inputs</li> <li>Use proper authentication</li> <li>Handle errors securely</li> </ol>"},{"location":"development/development/#deployment","title":"Deployment","text":"<ol> <li> <p>Build for production:    <pre><code>npm run build\n</code></pre></p> </li> <li> <p>Start production server:    <pre><code>npm start\n</code></pre></p> </li> <li> <p>Docker deployment:    <pre><code>docker-compose up -d\n</code></pre></p> </li> </ol>"},{"location":"development/development/#support","title":"Support","text":"<p>Need development help? 1. Check documentation 2. Search issues 3. Create new issue 4. Join discussions </p>"},{"location":"development/interfaces/","title":"Interface Documentation","text":"<p>This document describes the core interfaces used throughout the Home Assistant MCP.</p>"},{"location":"development/interfaces/#core-interfaces","title":"Core Interfaces","text":""},{"location":"development/interfaces/#tool-interface","title":"Tool Interface","text":"<pre><code>interface Tool {\n    /** Unique identifier for the tool */\n    id: string;\n\n    /** Human-readable name */\n    name: string;\n\n    /** Detailed description */\n    description: string;\n\n    /** Semantic version */\n    version: string;\n\n    /** Tool category */\n    category: ToolCategory;\n\n    /** Execute tool functionality */\n    execute(params: any): Promise&lt;ToolResult&gt;;\n}\n</code></pre>"},{"location":"development/interfaces/#tool-result","title":"Tool Result","text":"<pre><code>interface ToolResult {\n    /** Operation success status */\n    success: boolean;\n\n    /** Response data */\n    data?: any;\n\n    /** Error message if failed */\n    message?: string;\n\n    /** Error code if failed */\n    error_code?: string;\n}\n</code></pre>"},{"location":"development/interfaces/#tool-category","title":"Tool Category","text":"<pre><code>enum ToolCategory {\n    DeviceManagement = 'device_management',\n    HistoryState = 'history_state',\n    Automation = 'automation',\n    AddonsPackages = 'addons_packages',\n    Notifications = 'notifications',\n    Events = 'events',\n    Utility = 'utility'\n}\n</code></pre>"},{"location":"development/interfaces/#event-interfaces","title":"Event Interfaces","text":""},{"location":"development/interfaces/#event-subscription","title":"Event Subscription","text":"<pre><code>interface EventSubscription {\n    /** Unique subscription ID */\n    id: string;\n\n    /** Event type to subscribe to */\n    event_type: string;\n\n    /** Optional entity ID filter */\n    entity_id?: string;\n\n    /** Optional domain filter */\n    domain?: string;\n\n    /** Subscription creation timestamp */\n    created_at: string;\n\n    /** Last event timestamp */\n    last_event?: string;\n}\n</code></pre>"},{"location":"development/interfaces/#event-message","title":"Event Message","text":"<pre><code>interface EventMessage {\n    /** Event type */\n    event_type: string;\n\n    /** Entity ID if applicable */\n    entity_id?: string;\n\n    /** Event data */\n    data: any;\n\n    /** Event origin */\n    origin: 'LOCAL' | 'REMOTE';\n\n    /** Event timestamp */\n    time_fired: string;\n\n    /** Event context */\n    context: EventContext;\n}\n</code></pre>"},{"location":"development/interfaces/#device-interfaces","title":"Device Interfaces","text":""},{"location":"development/interfaces/#device","title":"Device","text":"<pre><code>interface Device {\n    /** Device ID */\n    id: string;\n\n    /** Device name */\n    name: string;\n\n    /** Device domain */\n    domain: string;\n\n    /** Current state */\n    state: string;\n\n    /** Device attributes */\n    attributes: Record&lt;string, any&gt;;\n\n    /** Device capabilities */\n    capabilities: DeviceCapabilities;\n}\n</code></pre>"},{"location":"development/interfaces/#device-capabilities","title":"Device Capabilities","text":"<pre><code>interface DeviceCapabilities {\n    /** Supported features */\n    features: string[];\n\n    /** Supported commands */\n    commands: string[];\n\n    /** State attributes */\n    attributes: {\n        /** Attribute name */\n        [key: string]: {\n            /** Attribute type */\n            type: 'string' | 'number' | 'boolean' | 'object';\n            /** Attribute description */\n            description: string;\n            /** Optional value constraints */\n            constraints?: {\n                min?: number;\n                max?: number;\n                enum?: any[];\n            };\n        };\n    };\n}\n</code></pre>"},{"location":"development/interfaces/#authentication-interfaces","title":"Authentication Interfaces","text":""},{"location":"development/interfaces/#auth-token","title":"Auth Token","text":"<pre><code>interface AuthToken {\n    /** Token value */\n    token: string;\n\n    /** Token type */\n    type: 'bearer' | 'jwt';\n\n    /** Expiration timestamp */\n    expires_at: string;\n\n    /** Token refresh info */\n    refresh?: {\n        token: string;\n        expires_at: string;\n    };\n}\n</code></pre>"},{"location":"development/interfaces/#user","title":"User","text":"<pre><code>interface User {\n    /** User ID */\n    id: string;\n\n    /** Username */\n    username: string;\n\n    /** User type */\n    type: 'admin' | 'user' | 'service';\n\n    /** User permissions */\n    permissions: string[];\n}\n</code></pre>"},{"location":"development/interfaces/#error-interfaces","title":"Error Interfaces","text":""},{"location":"development/interfaces/#tool-error","title":"Tool Error","text":"<pre><code>interface ToolError extends Error {\n    /** Error code */\n    code: string;\n\n    /** HTTP status code */\n    status: number;\n\n    /** Error details */\n    details?: Record&lt;string, any&gt;;\n}\n</code></pre>"},{"location":"development/interfaces/#validation-error","title":"Validation Error","text":"<pre><code>interface ValidationError {\n    /** Error path */\n    path: string;\n\n    /** Error message */\n    message: string;\n\n    /** Error code */\n    code: string;\n}\n</code></pre>"},{"location":"development/interfaces/#configuration-interfaces","title":"Configuration Interfaces","text":""},{"location":"development/interfaces/#tool-configuration","title":"Tool Configuration","text":"<pre><code>interface ToolConfig {\n    /** Enable/disable tool */\n    enabled: boolean;\n\n    /** Tool-specific settings */\n    settings: Record&lt;string, any&gt;;\n\n    /** Rate limiting */\n    rate_limit?: {\n        /** Max requests */\n        max: number;\n        /** Time window in seconds */\n        window: number;\n    };\n}\n</code></pre>"},{"location":"development/interfaces/#system-configuration","title":"System Configuration","text":"<pre><code>interface SystemConfig {\n    /** System name */\n    name: string;\n\n    /** Environment */\n    environment: 'development' | 'production';\n\n    /** Log level */\n    log_level: 'debug' | 'info' | 'warn' | 'error';\n\n    /** Tool configurations */\n    tools: Record&lt;string, ToolConfig&gt;;\n}\n</code></pre>"},{"location":"development/interfaces/#best-practices","title":"Best Practices","text":"<ol> <li>Use TypeScript for all interfaces</li> <li>Include JSDoc comments</li> <li>Use strict typing</li> <li>Keep interfaces focused</li> <li>Use consistent naming</li> <li>Document constraints</li> <li>Version interfaces</li> <li>Include examples</li> </ol>"},{"location":"development/interfaces/#see-also","title":"See Also","text":"<ul> <li>Tool Development Guide</li> <li>Best Practices</li> <li>Testing Guide </li> </ul>"},{"location":"development/test-migration-guide/","title":"Migrating Tests from Jest to Bun","text":"<p>This guide provides instructions for migrating test files from Jest to Bun's test framework.</p>"},{"location":"development/test-migration-guide/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Basic Setup</li> <li>Import Changes</li> <li>API Changes</li> <li>Mocking</li> <li>Common Patterns</li> <li>Examples</li> </ul>"},{"location":"development/test-migration-guide/#basic-setup","title":"Basic Setup","text":"<ol> <li> <p>Remove Jest-related dependencies from <code>package.json</code>: <pre><code>{\n  \"devDependencies\": {\n    \"@jest/globals\": \"...\",\n    \"jest\": \"...\",\n    \"ts-jest\": \"...\"\n  }\n}\n</code></pre></p> </li> <li> <p>Remove Jest configuration files:</p> </li> <li><code>jest.config.js</code></li> <li> <p><code>jest.setup.js</code></p> </li> <li> <p>Update test scripts in <code>package.json</code>: <pre><code>{\n  \"scripts\": {\n    \"test\": \"bun test\",\n    \"test:watch\": \"bun test --watch\",\n    \"test:coverage\": \"bun test --coverage\"\n  }\n}\n</code></pre></p> </li> </ol>"},{"location":"development/test-migration-guide/#import-changes","title":"Import Changes","text":""},{"location":"development/test-migration-guide/#before-jest","title":"Before (Jest):","text":"<pre><code>import { jest, describe, it, expect, beforeEach, afterEach } from '@jest/globals';\n</code></pre>"},{"location":"development/test-migration-guide/#after-bun","title":"After (Bun):","text":"<pre><code>import { describe, expect, test, beforeEach, afterEach, mock } from \"bun:test\";\nimport type { Mock } from \"bun:test\";\n</code></pre> <p>Note: <code>it</code> is replaced with <code>test</code> in Bun.</p>"},{"location":"development/test-migration-guide/#api-changes","title":"API Changes","text":""},{"location":"development/test-migration-guide/#test-structure","title":"Test Structure","text":"<pre><code>// Jest\ndescribe('Suite', () =&gt; {\n  it('should do something', () =&gt; {\n    // test\n  });\n});\n\n// Bun\ndescribe('Suite', () =&gt; {\n  test('should do something', () =&gt; {\n    // test\n  });\n});\n</code></pre>"},{"location":"development/test-migration-guide/#assertions","title":"Assertions","text":"<p>Most Jest assertions work the same in Bun:</p> <pre><code>// These work the same in both:\nexpect(value).toBe(expected);\nexpect(value).toEqual(expected);\nexpect(value).toBeDefined();\nexpect(value).toBeUndefined();\nexpect(value).toBeTruthy();\nexpect(value).toBeFalsy();\nexpect(array).toContain(item);\nexpect(value).toBeInstanceOf(Class);\nexpect(spy).toHaveBeenCalled();\nexpect(spy).toHaveBeenCalledWith(...args);\n</code></pre>"},{"location":"development/test-migration-guide/#mocking","title":"Mocking","text":""},{"location":"development/test-migration-guide/#function-mocking","title":"Function Mocking","text":""},{"location":"development/test-migration-guide/#before-jest_1","title":"Before (Jest):","text":"<pre><code>const mockFn = jest.fn();\nmockFn.mockImplementation(() =&gt; 'result');\nmockFn.mockResolvedValue('result');\nmockFn.mockRejectedValue(new Error());\n</code></pre>"},{"location":"development/test-migration-guide/#after-bun_1","title":"After (Bun):","text":"<pre><code>const mockFn = mock(() =&gt; 'result');\nconst mockAsyncFn = mock(() =&gt; Promise.resolve('result'));\nconst mockErrorFn = mock(() =&gt; Promise.reject(new Error()));\n</code></pre>"},{"location":"development/test-migration-guide/#module-mocking","title":"Module Mocking","text":""},{"location":"development/test-migration-guide/#before-jest_2","title":"Before (Jest):","text":"<pre><code>jest.mock('module-name', () =&gt; ({\n  default: jest.fn(),\n  namedExport: jest.fn()\n}));\n</code></pre>"},{"location":"development/test-migration-guide/#after-bun_2","title":"After (Bun):","text":"<pre><code>// Option 1: Using vi.mock (if available)\nvi.mock('module-name', () =&gt; ({\n  default: mock(() =&gt; {}),\n  namedExport: mock(() =&gt; {})\n}));\n\n// Option 2: Using dynamic imports\nconst mockModule = {\n  default: mock(() =&gt; {}),\n  namedExport: mock(() =&gt; {})\n};\n</code></pre>"},{"location":"development/test-migration-guide/#mock-resetclear","title":"Mock Reset/Clear","text":""},{"location":"development/test-migration-guide/#before-jest_3","title":"Before (Jest):","text":"<pre><code>jest.clearAllMocks();\nmockFn.mockClear();\njest.resetModules();\n</code></pre>"},{"location":"development/test-migration-guide/#after-bun_3","title":"After (Bun):","text":"<pre><code>mockFn.mockReset();\n// or for specific calls\nmockFn.mock.calls = [];\n</code></pre>"},{"location":"development/test-migration-guide/#spy-on-methods","title":"Spy on Methods","text":""},{"location":"development/test-migration-guide/#before-jest_4","title":"Before (Jest):","text":"<pre><code>jest.spyOn(object, 'method');\n</code></pre>"},{"location":"development/test-migration-guide/#after-bun_4","title":"After (Bun):","text":"<pre><code>const spy = mock(((...args) =&gt; object.method(...args)));\nobject.method = spy;\n</code></pre>"},{"location":"development/test-migration-guide/#common-patterns","title":"Common Patterns","text":""},{"location":"development/test-migration-guide/#async-tests","title":"Async Tests","text":"<pre><code>// Works the same in both Jest and Bun:\ntest('async test', async () =&gt; {\n  const result = await someAsyncFunction();\n  expect(result).toBe(expected);\n});\n</code></pre>"},{"location":"development/test-migration-guide/#setup-and-teardown","title":"Setup and Teardown","text":"<pre><code>describe('Suite', () =&gt; {\n  beforeEach(() =&gt; {\n    // setup\n  });\n\n  afterEach(() =&gt; {\n    // cleanup\n  });\n\n  test('test', () =&gt; {\n    // test\n  });\n});\n</code></pre>"},{"location":"development/test-migration-guide/#mocking-fetch","title":"Mocking Fetch","text":"<pre><code>// Before (Jest)\nglobal.fetch = jest.fn(() =&gt; Promise.resolve(new Response()));\n\n// After (Bun)\nconst mockFetch = mock(() =&gt; Promise.resolve(new Response()));\nglobal.fetch = mockFetch as unknown as typeof fetch;\n</code></pre>"},{"location":"development/test-migration-guide/#mocking-websocket","title":"Mocking WebSocket","text":"<pre><code>// Create a MockWebSocket class implementing WebSocket interface\nclass MockWebSocket implements WebSocket {\n  public static readonly CONNECTING = 0;\n  public static readonly OPEN = 1;\n  public static readonly CLOSING = 2;\n  public static readonly CLOSED = 3;\n\n  public readyState: 0 | 1 | 2 | 3 = MockWebSocket.OPEN;\n  public addEventListener = mock(() =&gt; undefined);\n  public removeEventListener = mock(() =&gt; undefined);\n  public send = mock(() =&gt; undefined);\n  public close = mock(() =&gt; undefined);\n  // ... implement other required methods\n}\n\n// Use it in tests\nglobal.WebSocket = MockWebSocket as unknown as typeof WebSocket;\n</code></pre>"},{"location":"development/test-migration-guide/#examples","title":"Examples","text":""},{"location":"development/test-migration-guide/#basic-test","title":"Basic Test","text":"<pre><code>import { describe, expect, test } from \"bun:test\";\n\ndescribe('formatToolCall', () =&gt; {\n  test('should format an object into the correct structure', () =&gt; {\n    const testObj = { name: 'test', value: 123 };\n    const result = formatToolCall(testObj);\n\n    expect(result).toEqual({\n      content: [{\n        type: 'text',\n        text: JSON.stringify(testObj, null, 2),\n        isError: false\n      }]\n    });\n  });\n});\n</code></pre>"},{"location":"development/test-migration-guide/#async-test-with-mocking","title":"Async Test with Mocking","text":"<pre><code>import { describe, expect, test, mock } from \"bun:test\";\n\ndescribe('API Client', () =&gt; {\n  test('should fetch data', async () =&gt; {\n    const mockResponse = { data: 'test' };\n    const mockFetch = mock(() =&gt; Promise.resolve(new Response(\n      JSON.stringify(mockResponse),\n      { status: 200, headers: new Headers() }\n    )));\n    global.fetch = mockFetch as unknown as typeof fetch;\n\n    const result = await apiClient.getData();\n    expect(result).toEqual(mockResponse);\n  });\n});\n</code></pre>"},{"location":"development/test-migration-guide/#complex-mocking-example","title":"Complex Mocking Example","text":"<pre><code>import { describe, expect, test, mock } from \"bun:test\";\nimport type { Mock } from \"bun:test\";\n\ninterface MockServices {\n  light: {\n    turn_on: Mock&lt;() =&gt; Promise&lt;{ success: boolean }&gt;&gt;;\n    turn_off: Mock&lt;() =&gt; Promise&lt;{ success: boolean }&gt;&gt;;\n  };\n}\n\nconst mockServices: MockServices = {\n  light: {\n    turn_on: mock(() =&gt; Promise.resolve({ success: true })),\n    turn_off: mock(() =&gt; Promise.resolve({ success: true }))\n  }\n};\n\ndescribe('Home Assistant Service', () =&gt; {\n  test('should control lights', async () =&gt; {\n    const result = await mockServices.light.turn_on();\n    expect(result.success).toBe(true);\n  });\n});\n</code></pre>"},{"location":"development/test-migration-guide/#best-practices","title":"Best Practices","text":"<ol> <li>Use TypeScript for better type safety in mocks</li> <li>Keep mocks as simple as possible</li> <li>Prefer interface-based mocks over concrete implementations</li> <li>Use proper type assertions when necessary</li> <li>Clean up mocks in <code>afterEach</code> blocks</li> <li>Use descriptive test names</li> <li>Group related tests using <code>describe</code> blocks</li> </ol>"},{"location":"development/test-migration-guide/#common-issues-and-solutions","title":"Common Issues and Solutions","text":""},{"location":"development/test-migration-guide/#issue-type-errors-with-mocks","title":"Issue: Type Errors with Mocks","text":"<pre><code>// Solution: Use proper typing with Mock type\nimport type { Mock } from \"bun:test\";\nconst mockFn: Mock&lt;() =&gt; string&gt; = mock(() =&gt; \"result\");\n</code></pre>"},{"location":"development/test-migration-guide/#issue-global-object-mocking","title":"Issue: Global Object Mocking","text":"<pre><code>// Solution: Use type assertions carefully\nglobal.someGlobal = mockImplementation as unknown as typeof someGlobal;\n</code></pre>"},{"location":"development/test-migration-guide/#issue-module-mocking","title":"Issue: Module Mocking","text":"<pre><code>// Solution: Use dynamic imports or vi.mock if available\nconst mockModule = {\n  default: mock(() =&gt; mockImplementation)\n};\n</code></pre>"},{"location":"development/tools/","title":"Tool Development Guide","text":"<p>This guide explains how to create new tools for the Home Assistant MCP.</p>"},{"location":"development/tools/#tool-structure","title":"Tool Structure","text":"<p>Each tool should follow this basic structure:</p> <pre><code>interface Tool {\n    id: string;\n    name: string;\n    description: string;\n    version: string;\n    category: ToolCategory;\n    execute(params: any): Promise&lt;ToolResult&gt;;\n}\n</code></pre>"},{"location":"development/tools/#creating-a-new-tool","title":"Creating a New Tool","text":"<ol> <li>Create a new file in the appropriate category directory</li> <li>Implement the Tool interface</li> <li>Add API endpoints</li> <li>Add WebSocket handlers</li> <li>Add documentation</li> <li>Add tests</li> </ol>"},{"location":"development/tools/#example-tool-implementation","title":"Example Tool Implementation","text":"<pre><code>import { Tool, ToolCategory, ToolResult } from '../interfaces';\n\nexport class MyCustomTool implements Tool {\n    id = 'my_custom_tool';\n    name = 'My Custom Tool';\n    description = 'Description of what the tool does';\n    version = '1.0.0';\n    category = ToolCategory.Utility;\n\n    async execute(params: any): Promise&lt;ToolResult&gt; {\n        // Tool implementation\n        return {\n            success: true,\n            data: {\n                // Tool-specific response data\n            }\n        };\n    }\n}\n</code></pre>"},{"location":"development/tools/#tool-categories","title":"Tool Categories","text":"<ul> <li>Device Management</li> <li>History &amp; State</li> <li>Automation</li> <li>Add-ons &amp; Packages</li> <li>Notifications</li> <li>Events</li> <li>Utility</li> </ul>"},{"location":"development/tools/#api-integration","title":"API Integration","text":""},{"location":"development/tools/#rest-endpoint","title":"REST Endpoint","text":"<pre><code>import { Router } from 'express';\nimport { MyCustomTool } from './my-custom-tool';\n\nconst router = Router();\nconst tool = new MyCustomTool();\n\nrouter.post('/api/tools/custom', async (req, res) =&gt; {\n    try {\n        const result = await tool.execute(req.body);\n        res.json(result);\n    } catch (error) {\n        res.status(500).json({\n            success: false,\n            message: error.message\n        });\n    }\n});\n</code></pre>"},{"location":"development/tools/#websocket-handler","title":"WebSocket Handler","text":"<pre><code>import { WebSocketServer } from 'ws';\nimport { MyCustomTool } from './my-custom-tool';\n\nconst tool = new MyCustomTool();\n\nwss.on('connection', (ws) =&gt; {\n    ws.on('message', async (message) =&gt; {\n        const { type, params } = JSON.parse(message);\n        if (type === 'my_custom_tool') {\n            const result = await tool.execute(params);\n            ws.send(JSON.stringify(result));\n        }\n    });\n});\n</code></pre>"},{"location":"development/tools/#error-handling","title":"Error Handling","text":"<pre><code>class ToolError extends Error {\n    constructor(\n        message: string,\n        public code: string,\n        public status: number = 500\n    ) {\n        super(message);\n        this.name = 'ToolError';\n    }\n}\n\n// Usage in tool\nasync execute(params: any): Promise&lt;ToolResult&gt; {\n    try {\n        // Tool implementation\n    } catch (error) {\n        throw new ToolError(\n            'Operation failed',\n            'TOOL_ERROR',\n            500\n        );\n    }\n}\n</code></pre>"},{"location":"development/tools/#testing","title":"Testing","text":"<pre><code>import { MyCustomTool } from './my-custom-tool';\n\ndescribe('MyCustomTool', () =&gt; {\n    let tool: MyCustomTool;\n\n    beforeEach(() =&gt; {\n        tool = new MyCustomTool();\n    });\n\n    it('should execute successfully', async () =&gt; {\n        const result = await tool.execute({\n            // Test parameters\n        });\n        expect(result.success).toBe(true);\n    });\n\n    it('should handle errors', async () =&gt; {\n        // Error test cases\n    });\n});\n</code></pre>"},{"location":"development/tools/#documentation","title":"Documentation","text":"<ol> <li>Create tool documentation in <code>docs/tools/category/tool-name.md</code></li> <li>Update <code>tools/tools.md</code> with tool reference</li> <li>Add tool to navigation in <code>mkdocs.yml</code></li> </ol>"},{"location":"development/tools/#documentation-template","title":"Documentation Template","text":"<pre><code># Tool Name\n\nDescription of the tool.\n\n## Features\n\n- Feature 1\n- Feature 2\n\n## Usage\n\n### REST API\n\n```typescript\n// API endpoints\n</code></pre>"},{"location":"development/tools/#websocket","title":"WebSocket","text":"<pre><code>// WebSocket usage\n</code></pre>"},{"location":"development/tools/#examples","title":"Examples","text":""},{"location":"development/tools/#example-1","title":"Example 1","text":"<pre><code>// Usage example\n</code></pre>"},{"location":"development/tools/#response-format","title":"Response Format","text":"<p><pre><code>{\n    \"success\": true,\n    \"data\": {\n        // Response data structure\n    }\n}\n</code></pre> ```</p>"},{"location":"development/tools/#best-practices","title":"Best Practices","text":"<ol> <li>Follow consistent naming conventions</li> <li>Implement proper error handling</li> <li>Add comprehensive documentation</li> <li>Write thorough tests</li> <li>Use TypeScript for type safety</li> <li>Follow SOLID principles</li> <li>Implement rate limiting</li> <li>Add proper logging</li> </ol>"},{"location":"development/tools/#see-also","title":"See Also","text":"<ul> <li>Interface Documentation</li> <li>Best Practices</li> <li>Testing Guide </li> </ul>"},{"location":"examples/","title":"Example Projects \ud83d\udcda","text":"<p>This section contains examples and tutorials for common MCP Server integrations.</p>"},{"location":"examples/#speech-to-text-integration","title":"Speech-to-Text Integration","text":"<p>Example of integrating speech recognition with MCP Server:</p> <pre><code>// From examples/speech-to-text-example.ts\n// Add example code and explanation\n</code></pre>"},{"location":"examples/#more-examples-coming-soon","title":"More Examples Coming Soon","text":"<p>... </p>"},{"location":"getting-started/configuration/","title":"Configuration","text":""},{"location":"getting-started/configuration/#basic-configuration","title":"Basic Configuration","text":""},{"location":"getting-started/configuration/#advanced-settings","title":"Advanced Settings","text":""},{"location":"getting-started/docker/","title":"Docker Deployment Guide \ud83d\udc33","text":"<p>Detailed guide for deploying MCP Server with Docker... </p>"},{"location":"getting-started/installation/","title":"Installation Guide \ud83d\udee0\ufe0f","text":"<p>This guide covers different methods to install and set up the MCP Server for Home Assistant. Choose the installation method that best suits your needs.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before installing MCP Server, ensure you have:</p> <ul> <li>Home Assistant instance running and accessible</li> <li>Node.js 18+ or Docker installed</li> <li>Home Assistant Long-Lived Access Token (How to get one)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#1-smithery-installation-recommended","title":"1. \ud83d\udd27 Smithery Installation (Recommended)","text":"<p>The easiest way to install MCP Server is through Smithery:</p>"},{"location":"getting-started/installation/#smithery-configuration","title":"Smithery Configuration","text":"<p>The project includes a <code>smithery.yaml</code> configuration:</p> <pre><code># Add smithery.yaml contents and explanation\n</code></pre>"},{"location":"getting-started/installation/#installation-steps","title":"Installation Steps","text":"<pre><code>npx -y @smithery/cli install @jango-blockchained/advanced-homeassistant-mcp --client claude\n</code></pre>"},{"location":"getting-started/installation/#2-docker-installation","title":"2. \ud83d\udc33 Docker Installation","text":"<p>For a containerized deployment:</p> <pre><code># Clone the repository\ngit clone --depth 1 https://github.com/jango-blockchained/advanced-homeassistant-mcp.git\ncd advanced-homeassistant-mcp\n\n# Configure environment variables\ncp .env.example .env\n# Edit .env with your Home Assistant details:\n# - HA_URL: Your Home Assistant URL\n# - HA_TOKEN: Your Long-Lived Access Token\n# - Other configuration options\n\n# Build and start containers\ndocker compose up -d --build\n\n# View logs (optional)\ndocker compose logs -f --tail=50\n</code></pre>"},{"location":"getting-started/installation/#3-manual-installation","title":"3. \ud83d\udcbb Manual Installation","text":"<p>For direct installation on your system:</p> <pre><code># Install Bun runtime\ncurl -fsSL https://bun.sh/install | bash\n\n# Clone and install\ngit clone https://github.com/jango-blockchained/advanced-homeassistant-mcp.git\ncd advanced-homeassistant-mcp\nbun install --frozen-lockfile\n\n# Configure environment\ncp .env.example .env\n# Edit .env with your configuration\n\n# Start the server\nbun run dev --watch\n</code></pre>"},{"location":"getting-started/installation/#configuration","title":"Configuration","text":""},{"location":"getting-started/installation/#environment-variables","title":"Environment Variables","text":"<p>Key configuration options in your <code>.env</code> file:</p> <pre><code># Home Assistant Configuration\nHA_URL=http://your-homeassistant:8123\nHA_TOKEN=your_long_lived_access_token\n\n# Server Configuration\nPORT=3000\nHOST=0.0.0.0\nNODE_ENV=production\n\n# Security Settings\nJWT_SECRET=your_secure_jwt_secret\nRATE_LIMIT=100\n</code></pre>"},{"location":"getting-started/installation/#client-integration","title":"Client Integration","text":""},{"location":"getting-started/installation/#cursor-integration","title":"Cursor Integration","text":"<p>Add to <code>.cursor/config/config.json</code>:</p> <pre><code>{\n  \"mcpServers\": {\n    \"homeassistant-mcp\": {\n      \"command\": \"bun\",\n      \"args\": [\"run\", \"start\"],\n      \"cwd\": \"${workspaceRoot}\",\n      \"env\": {\n        \"NODE_ENV\": \"development\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/installation/#claude-desktop-integration","title":"Claude Desktop Integration","text":"<p>Add to your Claude configuration:</p> <pre><code>{\n  \"mcpServers\": {\n    \"homeassistant-mcp\": {\n      \"command\": \"bun\",\n      \"args\": [\"run\", \"start\", \"--port\", \"8080\"],\n      \"env\": {\n        \"NODE_ENV\": \"production\"\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"getting-started/installation/#verification","title":"Verification","text":"<p>To verify your installation:</p> <ol> <li> <p>Check server status:    <pre><code>curl http://localhost:3000/health\n</code></pre></p> </li> <li> <p>Test Home Assistant connection:    <pre><code>curl http://localhost:3000/api/state\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues:</p> <ol> <li>Check the Troubleshooting Guide</li> <li>Verify your environment variables</li> <li>Check server logs:    <pre><code># For Docker installation\ndocker compose logs -f\n\n# For manual installation\nbun run dev\n</code></pre></li> </ol>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Follow the Quick Start Guide to begin using MCP Server</li> <li>Read the API Documentation for integration details</li> <li>Check the Architecture Overview to understand the system</li> </ul>"},{"location":"getting-started/installation/#support","title":"Support","text":"<p>Need help? Check our Support Resources or open an issue. </p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide \ud83d\ude80","text":"<p>This guide will help you get started with MCP Server after installation. We'll cover basic usage, common commands, and simple integrations.</p>"},{"location":"getting-started/quickstart/#first-steps","title":"First Steps","text":""},{"location":"getting-started/quickstart/#1-verify-connection","title":"1. Verify Connection","text":"<p>After installation, verify your MCP Server is running and connected to Home Assistant:</p> <pre><code># Check server health\ncurl http://localhost:3000/health\n\n# Verify Home Assistant connection\ncurl http://localhost:3000/api/state\n</code></pre>"},{"location":"getting-started/quickstart/#2-basic-voice-commands","title":"2. Basic Voice Commands","text":"<p>Try these basic voice commands to test your setup:</p> <pre><code># Example using curl for testing\ncurl -X POST http://localhost:3000/api/command \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"command\": \"Turn on the living room lights\"}'\n</code></pre> <p>Common voice commands: - \"Turn on/off [device name]\" - \"Set [device] to [value]\" - \"What's the temperature in [room]?\" - \"Is [device] on or off?\"</p>"},{"location":"getting-started/quickstart/#real-world-examples","title":"Real-World Examples","text":""},{"location":"getting-started/quickstart/#1-smart-lighting-control","title":"1. Smart Lighting Control","text":"<pre><code>// Browser example using fetch\nconst response = await fetch('http://localhost:3000/api/command', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({\n    command: 'Set living room lights to 50% brightness and warm white color'\n  })\n});\n</code></pre>"},{"location":"getting-started/quickstart/#2-real-time-updates","title":"2. Real-Time Updates","text":"<p>Subscribe to device state changes using Server-Sent Events (SSE):</p> <pre><code>const eventSource = new EventSource('http://localhost:3000/subscribe_events?token=YOUR_TOKEN&amp;domain=light');\n\neventSource.onmessage = (event) =&gt; {\n    const data = JSON.parse(event.data);\n    console.log('Device state changed:', data);\n    // Update your UI here\n};\n</code></pre>"},{"location":"getting-started/quickstart/#3-scene-automation","title":"3. Scene Automation","text":"<p>Create and trigger scenes for different activities:</p> <pre><code>// Create a \"Movie Night\" scene\nconst createScene = async () =&gt; {\n  await fetch('http://localhost:3000/api/scene', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({\n      name: 'Movie Night',\n      actions: [\n        { device: 'living_room_lights', action: 'dim', value: 20 },\n        { device: 'tv', action: 'on' },\n        { device: 'soundbar', action: 'on' }\n      ]\n    })\n  });\n};\n\n// Trigger the scene with voice command:\n// \"Hey MCP, activate movie night scene\"\n</code></pre>"},{"location":"getting-started/quickstart/#integration-examples","title":"Integration Examples","text":""},{"location":"getting-started/quickstart/#1-web-dashboard-integration","title":"1. Web Dashboard Integration","text":"<pre><code>// React component example\nfunction SmartHomeControl() {\n    const [devices, setDevices] = useState([]);\n\n    useEffect(() =&gt; {\n        // Subscribe to device updates\n        const events = new EventSource('http://localhost:3000/subscribe_events');\n        events.onmessage = (event) =&gt; {\n            const data = JSON.parse(event.data);\n            setDevices(currentDevices =&gt; \n                currentDevices.map(device =&gt; \n                    device.id === data.id ? {...device, ...data} : device\n                )\n            );\n        };\n\n        return () =&gt; events.close();\n    }, []);\n\n    return (\n        &lt;div className=\"dashboard\"&gt;\n            {devices.map(device =&gt; (\n                &lt;DeviceCard key={device.id} device={device} /&gt;\n            ))}\n        &lt;/div&gt;\n    );\n}\n</code></pre>"},{"location":"getting-started/quickstart/#2-voice-assistant-integration","title":"2. Voice Assistant Integration","text":"<pre><code>// Example using speech-to-text with MCP\nasync function handleVoiceCommand(audioBlob: Blob) {\n    // First, convert speech to text\n    const text = await speechToText(audioBlob);\n\n    // Then send command to MCP\n    const response = await fetch('http://localhost:3000/api/command', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ command: text })\n    });\n\n    return response.json();\n}\n</code></pre>"},{"location":"getting-started/quickstart/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Error Handling <pre><code>try {\n    const response = await fetch('http://localhost:3000/api/command', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ command: 'Turn on lights' })\n    });\n\n    if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const data = await response.json();\n} catch (error) {\n    console.error('Error:', error);\n    // Handle error appropriately\n}\n</code></pre></p> </li> <li> <p>Connection Management <pre><code>class MCPConnection {\n    constructor() {\n        this.eventSource = null;\n        this.reconnectAttempts = 0;\n    }\n\n    connect() {\n        this.eventSource = new EventSource('http://localhost:3000/subscribe_events');\n        this.eventSource.onerror = this.handleError.bind(this);\n    }\n\n    handleError() {\n        if (this.reconnectAttempts &lt; 3) {\n            setTimeout(() =&gt; {\n                this.reconnectAttempts++;\n                this.connect();\n            }, 1000 * this.reconnectAttempts);\n        }\n    }\n}\n</code></pre></p> </li> </ol>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Documentation for advanced features</li> <li>Learn about SSE API for real-time updates</li> <li>Check out Architecture for system design details</li> <li>Read the Contributing Guide to get involved</li> </ul>"},{"location":"getting-started/quickstart/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues: - Verify your authentication token - Check server logs for errors - Ensure Home Assistant is accessible - Review the Troubleshooting Guide</p> <p>Need more help? Visit our Support Resources. </p>"},{"location":"tools/tools/","title":"Home Assistant MCP Tools","text":"<p>This section documents all available tools in the Home Assistant MCP.</p>"},{"location":"tools/tools/#available-tools","title":"Available Tools","text":""},{"location":"tools/tools/#device-management","title":"Device Management","text":"<ol> <li>List Devices</li> <li>List all available Home Assistant devices</li> <li>Group devices by domain</li> <li> <p>Get device states and attributes</p> </li> <li> <p>Device Control</p> </li> <li>Control various device types</li> <li>Support for lights, switches, covers, climate devices</li> <li>Domain-specific commands and parameters</li> </ol>"},{"location":"tools/tools/#history-and-state","title":"History and State","text":"<ol> <li>History</li> <li>Fetch device state history</li> <li>Filter by time range</li> <li> <p>Get significant changes</p> </li> <li> <p>Scene Management</p> </li> <li>List available scenes</li> <li>Activate scenes</li> <li>Scene state information</li> </ol>"},{"location":"tools/tools/#automation","title":"Automation","text":"<ol> <li>Automation Management</li> <li>List automations</li> <li>Toggle automation state</li> <li> <p>Trigger automations manually</p> </li> <li> <p>Automation Configuration</p> </li> <li>Create new automations</li> <li>Update existing automations</li> <li>Delete automations</li> <li>Duplicate automations</li> </ol>"},{"location":"tools/tools/#add-ons-and-packages","title":"Add-ons and Packages","text":"<ol> <li>Add-on Management</li> <li>List available add-ons</li> <li>Install/uninstall add-ons</li> <li>Start/stop/restart add-ons</li> <li> <p>Get add-on information</p> </li> <li> <p>Package Management</p> </li> <li>Manage HACS packages</li> <li>Install/update/remove packages</li> <li>List available packages by category</li> </ol>"},{"location":"tools/tools/#notifications","title":"Notifications","text":"<ol> <li>Notify</li> <li>Send notifications</li> <li>Support for multiple notification services</li> <li>Custom notification data</li> </ol>"},{"location":"tools/tools/#real-time-events","title":"Real-time Events","text":"<ol> <li>Event Subscription</li> <li>Subscribe to Home Assistant events</li> <li>Monitor specific entities</li> <li> <p>Domain-based monitoring</p> </li> <li> <p>SSE Statistics</p> </li> <li>Get SSE connection statistics</li> <li>Monitor active subscriptions</li> <li>Connection management</li> </ol>"},{"location":"tools/tools/#using-tools","title":"Using Tools","text":"<p>All tools can be accessed through:</p> <ol> <li>REST API endpoints</li> <li>WebSocket connections</li> <li>Server-Sent Events (SSE)</li> </ol>"},{"location":"tools/tools/#authentication","title":"Authentication","text":"<p>Tools require authentication using: - Home Assistant Long-Lived Access Token - JWT tokens for specific operations</p>"},{"location":"tools/tools/#error-handling","title":"Error Handling","text":"<p>All tools follow a consistent error handling pattern: <pre><code>{\n    success: boolean;\n    message?: string;\n    data?: any;\n}\n</code></pre></p>"},{"location":"tools/tools/#rate-limiting","title":"Rate Limiting","text":"<p>Tools are subject to rate limiting: - Default: 100 requests per 15 minutes - Configurable through environment variables</p>"},{"location":"tools/tools/#tool-development","title":"Tool Development","text":"<p>Want to create a new tool? Check out: - Tool Development Guide - Tool Interface Documentation - Best Practices</p>"},{"location":"tools/tools/#examples","title":"Examples","text":"<p>Each tool documentation includes: - Usage examples - Code snippets - Common use cases - Troubleshooting tips</p>"},{"location":"tools/tools/#support","title":"Support","text":"<p>Need help with tools? - Check individual tool documentation - See Troubleshooting Guide - Create an issue on GitHub </p>"},{"location":"tools/addons-packages/addon/","title":"Add-on Management Tool","text":"<p>The Add-on Management tool provides functionality to manage Home Assistant add-ons through the MCP interface.</p>"},{"location":"tools/addons-packages/addon/#features","title":"Features","text":"<ul> <li>List available add-ons</li> <li>Install/uninstall add-ons</li> <li>Start/stop/restart add-ons</li> <li>Get add-on information</li> <li>Update add-ons</li> <li>Configure add-ons</li> <li>View add-on logs</li> <li>Monitor add-on status</li> </ul>"},{"location":"tools/addons-packages/addon/#usage","title":"Usage","text":""},{"location":"tools/addons-packages/addon/#rest-api","title":"REST API","text":"<pre><code>GET /api/addons\nGET /api/addons/{addon_slug}\nPOST /api/addons/{addon_slug}/install\nPOST /api/addons/{addon_slug}/uninstall\nPOST /api/addons/{addon_slug}/start\nPOST /api/addons/{addon_slug}/stop\nPOST /api/addons/{addon_slug}/restart\nGET /api/addons/{addon_slug}/logs\nPUT /api/addons/{addon_slug}/config\nGET /api/addons/{addon_slug}/stats\n</code></pre>"},{"location":"tools/addons-packages/addon/#websocket","title":"WebSocket","text":"<pre><code>// List add-ons\n{\n    \"type\": \"get_addons\"\n}\n\n// Get add-on info\n{\n    \"type\": \"get_addon_info\",\n    \"addon_slug\": \"required_addon_slug\"\n}\n\n// Install add-on\n{\n    \"type\": \"install_addon\",\n    \"addon_slug\": \"required_addon_slug\",\n    \"version\": \"optional_version\"\n}\n\n// Control add-on\n{\n    \"type\": \"control_addon\",\n    \"addon_slug\": \"required_addon_slug\",\n    \"action\": \"start|stop|restart\"\n}\n</code></pre>"},{"location":"tools/addons-packages/addon/#examples","title":"Examples","text":""},{"location":"tools/addons-packages/addon/#list-all-add-ons","title":"List All Add-ons","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/addons', {\n    headers: {\n        'Authorization': 'Bearer your_access_token'\n    }\n});\nconst addons = await response.json();\n</code></pre>"},{"location":"tools/addons-packages/addon/#install-add-on","title":"Install Add-on","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/addons/mosquitto/install', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"version\": \"latest\"\n    })\n});\n</code></pre>"},{"location":"tools/addons-packages/addon/#configure-add-on","title":"Configure Add-on","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/addons/mosquitto/config', {\n    method: 'PUT',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"logins\": [\n            {\n                \"username\": \"mqtt_user\",\n                \"password\": \"mqtt_password\"\n            }\n        ],\n        \"customize\": {\n            \"active\": true,\n            \"folder\": \"mosquitto\"\n        }\n    })\n});\n</code></pre>"},{"location":"tools/addons-packages/addon/#response-format","title":"Response Format","text":""},{"location":"tools/addons-packages/addon/#add-on-list-response","title":"Add-on List Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"addons\": [\n            {\n                \"slug\": \"addon_slug\",\n                \"name\": \"Add-on Name\",\n                \"version\": \"1.0.0\",\n                \"state\": \"started\",\n                \"repository\": \"core\",\n                \"installed\": true,\n                \"update_available\": false\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"tools/addons-packages/addon/#add-on-info-response","title":"Add-on Info Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"addon\": {\n            \"slug\": \"addon_slug\",\n            \"name\": \"Add-on Name\",\n            \"version\": \"1.0.0\",\n            \"description\": \"Add-on description\",\n            \"long_description\": \"Detailed description\",\n            \"repository\": \"core\",\n            \"installed\": true,\n            \"state\": \"started\",\n            \"webui\": \"http://[HOST]:[PORT:80]\",\n            \"boot\": \"auto\",\n            \"options\": {\n                // Add-on specific options\n            },\n            \"schema\": {\n                // Add-on options schema\n            },\n            \"ports\": {\n                \"80/tcp\": 8080\n            },\n            \"ingress\": true,\n            \"ingress_port\": 8099\n        }\n    }\n}\n</code></pre>"},{"location":"tools/addons-packages/addon/#add-on-stats-response","title":"Add-on Stats Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"stats\": {\n            \"cpu_percent\": 2.5,\n            \"memory_usage\": 128974848,\n            \"memory_limit\": 536870912,\n            \"network_rx\": 1234,\n            \"network_tx\": 5678,\n            \"blk_read\": 12345,\n            \"blk_write\": 67890\n        }\n    }\n}\n</code></pre>"},{"location":"tools/addons-packages/addon/#error-handling","title":"Error Handling","text":""},{"location":"tools/addons-packages/addon/#common-error-codes","title":"Common Error Codes","text":"<ul> <li><code>404</code>: Add-on not found</li> <li><code>401</code>: Unauthorized</li> <li><code>400</code>: Invalid request</li> <li><code>409</code>: Add-on operation failed</li> <li><code>422</code>: Invalid configuration</li> </ul>"},{"location":"tools/addons-packages/addon/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"success\": false,\n    \"message\": \"Error description\",\n    \"error_code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"tools/addons-packages/addon/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Default limit: 50 requests per 15 minutes</li> <li>Configurable through environment variables:</li> <li><code>ADDON_RATE_LIMIT</code></li> <li><code>ADDON_RATE_WINDOW</code></li> </ul>"},{"location":"tools/addons-packages/addon/#best-practices","title":"Best Practices","text":"<ol> <li>Always check add-on compatibility</li> <li>Back up configurations before updates</li> <li>Monitor resource usage</li> <li>Use appropriate update strategies</li> <li>Implement proper error handling</li> <li>Test configurations in safe environment</li> <li>Handle rate limiting gracefully</li> <li>Keep add-ons updated</li> </ol>"},{"location":"tools/addons-packages/addon/#add-on-security","title":"Add-on Security","text":"<ul> <li>Use secure passwords</li> <li>Regularly update add-ons</li> <li>Monitor add-on logs</li> <li>Restrict network access</li> <li>Use SSL/TLS when available</li> <li>Follow principle of least privilege</li> </ul>"},{"location":"tools/addons-packages/addon/#see-also","title":"See Also","text":"<ul> <li>Package Management</li> <li>Device Control</li> <li>Event Subscription </li> </ul>"},{"location":"tools/addons-packages/package/","title":"Package Management Tool","text":"<p>The Package Management tool provides functionality to manage Home Assistant Community Store (HACS) packages through the MCP interface.</p>"},{"location":"tools/addons-packages/package/#features","title":"Features","text":"<ul> <li>List available packages</li> <li>Install/update/remove packages</li> <li>Search packages</li> <li>Get package information</li> <li>Manage package repositories</li> <li>Track package updates</li> <li>View package documentation</li> <li>Monitor package status</li> </ul>"},{"location":"tools/addons-packages/package/#usage","title":"Usage","text":""},{"location":"tools/addons-packages/package/#rest-api","title":"REST API","text":"<pre><code>GET /api/packages\nGET /api/packages/{package_id}\nPOST /api/packages/{package_id}/install\nPOST /api/packages/{package_id}/uninstall\nPOST /api/packages/{package_id}/update\nGET /api/packages/search\nGET /api/packages/categories\nGET /api/packages/repositories\n</code></pre>"},{"location":"tools/addons-packages/package/#websocket","title":"WebSocket","text":"<pre><code>// List packages\n{\n    \"type\": \"get_packages\",\n    \"category\": \"optional_category\"\n}\n\n// Search packages\n{\n    \"type\": \"search_packages\",\n    \"query\": \"search_query\",\n    \"category\": \"optional_category\"\n}\n\n// Install package\n{\n    \"type\": \"install_package\",\n    \"package_id\": \"required_package_id\",\n    \"version\": \"optional_version\"\n}\n</code></pre>"},{"location":"tools/addons-packages/package/#package-categories","title":"Package Categories","text":"<ul> <li>Integrations</li> <li>Frontend</li> <li>Themes</li> <li>AppDaemon Apps</li> <li>NetDaemon Apps</li> <li>Python Scripts</li> <li>Plugins</li> </ul>"},{"location":"tools/addons-packages/package/#examples","title":"Examples","text":""},{"location":"tools/addons-packages/package/#list-all-packages","title":"List All Packages","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/packages', {\n    headers: {\n        'Authorization': 'Bearer your_access_token'\n    }\n});\nconst packages = await response.json();\n</code></pre>"},{"location":"tools/addons-packages/package/#search-packages","title":"Search Packages","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/packages/search?q=weather&amp;category=integrations', {\n    headers: {\n        'Authorization': 'Bearer your_access_token'\n    }\n});\nconst searchResults = await response.json();\n</code></pre>"},{"location":"tools/addons-packages/package/#install-package","title":"Install Package","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/packages/custom-weather-card/install', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"version\": \"latest\"\n    })\n});\n</code></pre>"},{"location":"tools/addons-packages/package/#response-format","title":"Response Format","text":""},{"location":"tools/addons-packages/package/#package-list-response","title":"Package List Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"packages\": [\n            {\n                \"id\": \"package_id\",\n                \"name\": \"Package Name\",\n                \"category\": \"integrations\",\n                \"description\": \"Package description\",\n                \"version\": \"1.0.0\",\n                \"installed\": true,\n                \"update_available\": false,\n                \"stars\": 150,\n                \"downloads\": 10000\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"tools/addons-packages/package/#package-info-response","title":"Package Info Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"package\": {\n            \"id\": \"package_id\",\n            \"name\": \"Package Name\",\n            \"category\": \"integrations\",\n            \"description\": \"Package description\",\n            \"long_description\": \"Detailed description\",\n            \"version\": \"1.0.0\",\n            \"installed_version\": \"0.9.0\",\n            \"available_version\": \"1.0.0\",\n            \"installed\": true,\n            \"update_available\": true,\n            \"stars\": 150,\n            \"downloads\": 10000,\n            \"repository\": \"https://github.com/author/repo\",\n            \"author\": {\n                \"name\": \"Author Name\",\n                \"url\": \"https://github.com/author\"\n            },\n            \"documentation\": \"https://github.com/author/repo/wiki\",\n            \"dependencies\": [\n                \"dependency1\",\n                \"dependency2\"\n            ]\n        }\n    }\n}\n</code></pre>"},{"location":"tools/addons-packages/package/#search-response","title":"Search Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"results\": [\n            {\n                \"id\": \"package_id\",\n                \"name\": \"Package Name\",\n                \"category\": \"integrations\",\n                \"description\": \"Package description\",\n                \"version\": \"1.0.0\",\n                \"score\": 0.95\n            }\n        ],\n        \"total\": 42\n    }\n}\n</code></pre>"},{"location":"tools/addons-packages/package/#error-handling","title":"Error Handling","text":""},{"location":"tools/addons-packages/package/#common-error-codes","title":"Common Error Codes","text":"<ul> <li><code>404</code>: Package not found</li> <li><code>401</code>: Unauthorized</li> <li><code>400</code>: Invalid request</li> <li><code>409</code>: Package operation failed</li> <li><code>422</code>: Invalid configuration</li> <li><code>424</code>: Dependency error</li> </ul>"},{"location":"tools/addons-packages/package/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"success\": false,\n    \"message\": \"Error description\",\n    \"error_code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"tools/addons-packages/package/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Default limit: 50 requests per 15 minutes</li> <li>Configurable through environment variables:</li> <li><code>PACKAGE_RATE_LIMIT</code></li> <li><code>PACKAGE_RATE_WINDOW</code></li> </ul>"},{"location":"tools/addons-packages/package/#best-practices","title":"Best Practices","text":"<ol> <li>Check package compatibility</li> <li>Review package documentation</li> <li>Verify package dependencies</li> <li>Back up before updates</li> <li>Test in safe environment</li> <li>Monitor resource usage</li> <li>Keep packages updated</li> <li>Handle rate limiting gracefully</li> </ol>"},{"location":"tools/addons-packages/package/#package-security","title":"Package Security","text":"<ul> <li>Verify package sources</li> <li>Review package permissions</li> <li>Check package reputation</li> <li>Monitor package activity</li> <li>Keep dependencies updated</li> <li>Follow security advisories</li> </ul>"},{"location":"tools/addons-packages/package/#see-also","title":"See Also","text":"<ul> <li>Add-on Management</li> <li>Device Control</li> <li>Event Subscription </li> </ul>"},{"location":"tools/automation/automation-config/","title":"Automation Configuration Tool","text":"<p>The Automation Configuration tool provides functionality to create, update, and manage Home Assistant automation configurations.</p>"},{"location":"tools/automation/automation-config/#features","title":"Features","text":"<ul> <li>Create new automations</li> <li>Update existing automations</li> <li>Delete automations</li> <li>Duplicate automations</li> <li>Import/Export automation configurations</li> <li>Validate automation configurations</li> </ul>"},{"location":"tools/automation/automation-config/#usage","title":"Usage","text":""},{"location":"tools/automation/automation-config/#rest-api","title":"REST API","text":"<pre><code>POST /api/automations\nPUT /api/automations/{automation_id}\nDELETE /api/automations/{automation_id}\nPOST /api/automations/{automation_id}/duplicate\nPOST /api/automations/validate\n</code></pre>"},{"location":"tools/automation/automation-config/#websocket","title":"WebSocket","text":"<pre><code>// Create automation\n{\n    \"type\": \"create_automation\",\n    \"automation\": {\n        // Automation configuration\n    }\n}\n\n// Update automation\n{\n    \"type\": \"update_automation\",\n    \"automation_id\": \"required_automation_id\",\n    \"automation\": {\n        // Updated configuration\n    }\n}\n\n// Delete automation\n{\n    \"type\": \"delete_automation\",\n    \"automation_id\": \"required_automation_id\"\n}\n</code></pre>"},{"location":"tools/automation/automation-config/#automation-configuration","title":"Automation Configuration","text":""},{"location":"tools/automation/automation-config/#basic-structure","title":"Basic Structure","text":"<pre><code>{\n    \"id\": \"morning_routine\",\n    \"alias\": \"Morning Routine\",\n    \"description\": \"Turn on lights and adjust temperature in the morning\",\n    \"trigger\": [\n        {\n            \"platform\": \"time\",\n            \"at\": \"07:00:00\"\n        }\n    ],\n    \"condition\": [\n        {\n            \"condition\": \"time\",\n            \"weekday\": [\"mon\", \"tue\", \"wed\", \"thu\", \"fri\"]\n        }\n    ],\n    \"action\": [\n        {\n            \"service\": \"light.turn_on\",\n            \"target\": {\n                \"entity_id\": \"light.bedroom\"\n            },\n            \"data\": {\n                \"brightness\": 255,\n                \"transition\": 300\n            }\n        }\n    ],\n    \"mode\": \"single\"\n}\n</code></pre>"},{"location":"tools/automation/automation-config/#trigger-types","title":"Trigger Types","text":"<pre><code>// Time-based trigger\n{\n    \"platform\": \"time\",\n    \"at\": \"07:00:00\"\n}\n\n// State-based trigger\n{\n    \"platform\": \"state\",\n    \"entity_id\": \"binary_sensor.motion\",\n    \"to\": \"on\"\n}\n\n// Event-based trigger\n{\n    \"platform\": \"event\",\n    \"event_type\": \"custom_event\"\n}\n\n// Numeric state trigger\n{\n    \"platform\": \"numeric_state\",\n    \"entity_id\": \"sensor.temperature\",\n    \"above\": 25\n}\n</code></pre>"},{"location":"tools/automation/automation-config/#condition-types","title":"Condition Types","text":"<pre><code>// Time condition\n{\n    \"condition\": \"time\",\n    \"after\": \"07:00:00\",\n    \"before\": \"22:00:00\"\n}\n\n// State condition\n{\n    \"condition\": \"state\",\n    \"entity_id\": \"device_tracker.phone\",\n    \"state\": \"home\"\n}\n\n// Numeric state condition\n{\n    \"condition\": \"numeric_state\",\n    \"entity_id\": \"sensor.temperature\",\n    \"below\": 25\n}\n</code></pre>"},{"location":"tools/automation/automation-config/#action-types","title":"Action Types","text":"<pre><code>// Service call action\n{\n    \"service\": \"light.turn_on\",\n    \"target\": {\n        \"entity_id\": \"light.bedroom\"\n    }\n}\n\n// Delay action\n{\n    \"delay\": \"00:00:30\"\n}\n\n// Scene activation\n{\n    \"scene\": \"scene.evening_mode\"\n}\n\n// Conditional action\n{\n    \"choose\": [\n        {\n            \"conditions\": [\n                {\n                    \"condition\": \"state\",\n                    \"entity_id\": \"sun.sun\",\n                    \"state\": \"below_horizon\"\n                }\n            ],\n            \"sequence\": [\n                {\n                    \"service\": \"light.turn_on\",\n                    \"target\": {\n                        \"entity_id\": \"light.living_room\"\n                    }\n                }\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"tools/automation/automation-config/#examples","title":"Examples","text":""},{"location":"tools/automation/automation-config/#create-new-automation","title":"Create New Automation","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/automations', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"alias\": \"Morning Routine\",\n        \"description\": \"Turn on lights in the morning\",\n        \"trigger\": [\n            {\n                \"platform\": \"time\",\n                \"at\": \"07:00:00\"\n            }\n        ],\n        \"action\": [\n            {\n                \"service\": \"light.turn_on\",\n                \"target\": {\n                    \"entity_id\": \"light.bedroom\"\n                }\n            }\n        ]\n    })\n});\n</code></pre>"},{"location":"tools/automation/automation-config/#update-existing-automation","title":"Update Existing Automation","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/automations/morning_routine', {\n    method: 'PUT',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"alias\": \"Morning Routine\",\n        \"trigger\": [\n            {\n                \"platform\": \"time\",\n                \"at\": \"07:30:00\"  // Updated time\n            }\n        ],\n        \"action\": [\n            {\n                \"service\": \"light.turn_on\",\n                \"target\": {\n                    \"entity_id\": \"light.bedroom\"\n                }\n            }\n        ]\n    })\n});\n</code></pre>"},{"location":"tools/automation/automation-config/#response-format","title":"Response Format","text":""},{"location":"tools/automation/automation-config/#success-response","title":"Success Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"automation\": {\n            \"id\": \"created_automation_id\",\n            // Full automation configuration\n        }\n    }\n}\n</code></pre>"},{"location":"tools/automation/automation-config/#validation-response","title":"Validation Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"valid\": true,\n        \"warnings\": [\n            \"No conditions specified\"\n        ]\n    }\n}\n</code></pre>"},{"location":"tools/automation/automation-config/#error-handling","title":"Error Handling","text":""},{"location":"tools/automation/automation-config/#common-error-codes","title":"Common Error Codes","text":"<ul> <li><code>404</code>: Automation not found</li> <li><code>401</code>: Unauthorized</li> <li><code>400</code>: Invalid configuration</li> <li><code>409</code>: Automation creation/update failed</li> </ul>"},{"location":"tools/automation/automation-config/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"success\": false,\n    \"message\": \"Error description\",\n    \"error_code\": \"ERROR_CODE\",\n    \"validation_errors\": [\n        {\n            \"path\": \"trigger[0].platform\",\n            \"message\": \"Invalid trigger platform\"\n        }\n    ]\n}\n</code></pre>"},{"location":"tools/automation/automation-config/#best-practices","title":"Best Practices","text":"<ol> <li>Always validate configurations before saving</li> <li>Use descriptive aliases and descriptions</li> <li>Group related automations</li> <li>Test automations in a safe environment</li> <li>Document automation dependencies</li> <li>Use variables for reusable values</li> <li>Implement proper error handling</li> <li>Consider automation modes carefully</li> </ol>"},{"location":"tools/automation/automation-config/#see-also","title":"See Also","text":"<ul> <li>Automation Management</li> <li>Event Subscription</li> <li>Scene Management </li> </ul>"},{"location":"tools/automation/automation/","title":"Automation Management Tool","text":"<p>The Automation Management tool provides functionality to manage and control Home Assistant automations.</p>"},{"location":"tools/automation/automation/#features","title":"Features","text":"<ul> <li>List all automations</li> <li>Get automation details</li> <li>Toggle automation state (enable/disable)</li> <li>Trigger automations manually</li> <li>Monitor automation execution</li> <li>View automation history</li> </ul>"},{"location":"tools/automation/automation/#usage","title":"Usage","text":""},{"location":"tools/automation/automation/#rest-api","title":"REST API","text":"<pre><code>GET /api/automations\nGET /api/automations/{automation_id}\nPOST /api/automations/{automation_id}/toggle\nPOST /api/automations/{automation_id}/trigger\nGET /api/automations/{automation_id}/history\n</code></pre>"},{"location":"tools/automation/automation/#websocket","title":"WebSocket","text":"<pre><code>// List automations\n{\n    \"type\": \"get_automations\"\n}\n\n// Toggle automation\n{\n    \"type\": \"toggle_automation\",\n    \"automation_id\": \"required_automation_id\"\n}\n\n// Trigger automation\n{\n    \"type\": \"trigger_automation\",\n    \"automation_id\": \"required_automation_id\",\n    \"variables\": {\n        // Optional variables\n    }\n}\n</code></pre>"},{"location":"tools/automation/automation/#examples","title":"Examples","text":""},{"location":"tools/automation/automation/#list-all-automations","title":"List All Automations","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/automations', {\n    headers: {\n        'Authorization': 'Bearer your_access_token'\n    }\n});\nconst automations = await response.json();\n</code></pre>"},{"location":"tools/automation/automation/#toggle-automation-state","title":"Toggle Automation State","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/automations/morning_routine/toggle', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token'\n    }\n});\n</code></pre>"},{"location":"tools/automation/automation/#trigger-automation-manually","title":"Trigger Automation Manually","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/automations/morning_routine/trigger', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"variables\": {\n            \"brightness\": 100,\n            \"temperature\": 22\n        }\n    })\n});\n</code></pre>"},{"location":"tools/automation/automation/#response-format","title":"Response Format","text":""},{"location":"tools/automation/automation/#automation-list-response","title":"Automation List Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"automations\": [\n            {\n                \"id\": \"automation_id\",\n                \"name\": \"Automation Name\",\n                \"enabled\": true,\n                \"last_triggered\": \"2024-02-05T12:00:00Z\",\n                \"trigger_count\": 42\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"tools/automation/automation/#automation-details-response","title":"Automation Details Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"automation\": {\n            \"id\": \"automation_id\",\n            \"name\": \"Automation Name\",\n            \"enabled\": true,\n            \"triggers\": [\n                {\n                    \"platform\": \"time\",\n                    \"at\": \"07:00:00\"\n                }\n            ],\n            \"conditions\": [],\n            \"actions\": [\n                {\n                    \"service\": \"light.turn_on\",\n                    \"target\": {\n                        \"entity_id\": \"light.bedroom\"\n                    }\n                }\n            ],\n            \"mode\": \"single\",\n            \"max\": 10,\n            \"last_triggered\": \"2024-02-05T12:00:00Z\",\n            \"trigger_count\": 42\n        }\n    }\n}\n</code></pre>"},{"location":"tools/automation/automation/#automation-history-response","title":"Automation History Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"history\": [\n            {\n                \"timestamp\": \"2024-02-05T12:00:00Z\",\n                \"trigger\": {\n                    \"platform\": \"time\",\n                    \"at\": \"07:00:00\"\n                },\n                \"context\": {\n                    \"user_id\": \"user_123\",\n                    \"variables\": {}\n                },\n                \"result\": \"success\"\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"tools/automation/automation/#error-handling","title":"Error Handling","text":""},{"location":"tools/automation/automation/#common-error-codes","title":"Common Error Codes","text":"<ul> <li><code>404</code>: Automation not found</li> <li><code>401</code>: Unauthorized</li> <li><code>400</code>: Invalid request</li> <li><code>409</code>: Automation execution failed</li> </ul>"},{"location":"tools/automation/automation/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"success\": false,\n    \"message\": \"Error description\",\n    \"error_code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"tools/automation/automation/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Default limit: 50 requests per 15 minutes</li> <li>Configurable through environment variables:</li> <li><code>AUTOMATION_RATE_LIMIT</code></li> <li><code>AUTOMATION_RATE_WINDOW</code></li> </ul>"},{"location":"tools/automation/automation/#best-practices","title":"Best Practices","text":"<ol> <li>Monitor automation execution history</li> <li>Use descriptive automation names</li> <li>Implement proper error handling</li> <li>Cache automation configurations when possible</li> <li>Handle rate limiting gracefully</li> <li>Test automations before enabling</li> <li>Use variables for flexible automation behavior</li> </ol>"},{"location":"tools/automation/automation/#see-also","title":"See Also","text":"<ul> <li>Automation Configuration</li> <li>Event Subscription</li> <li>Device Control </li> </ul>"},{"location":"tools/device-management/control/","title":"Device Control Tool","text":"<p>The Device Control tool provides functionality to control various types of devices in your Home Assistant instance.</p>"},{"location":"tools/device-management/control/#supported-device-types","title":"Supported Device Types","text":"<ul> <li>Lights</li> <li>Switches</li> <li>Covers</li> <li>Climate devices</li> <li>Media players</li> <li>And more...</li> </ul>"},{"location":"tools/device-management/control/#usage","title":"Usage","text":""},{"location":"tools/device-management/control/#rest-api","title":"REST API","text":"<pre><code>POST /api/devices/{device_id}/control\n</code></pre>"},{"location":"tools/device-management/control/#websocket","title":"WebSocket","text":"<pre><code>{\n    \"type\": \"control_device\",\n    \"device_id\": \"required_device_id\",\n    \"domain\": \"required_domain\",\n    \"service\": \"required_service\",\n    \"data\": {\n        // Service-specific data\n    }\n}\n</code></pre>"},{"location":"tools/device-management/control/#domain-specific-commands","title":"Domain-Specific Commands","text":""},{"location":"tools/device-management/control/#lights","title":"Lights","text":"<pre><code>// Turn on/off\nPOST /api/devices/light/{device_id}/control\n{\n    \"service\": \"turn_on\",  // or \"turn_off\"\n}\n\n// Set brightness\n{\n    \"service\": \"turn_on\",\n    \"data\": {\n        \"brightness\": 255  // 0-255\n    }\n}\n\n// Set color\n{\n    \"service\": \"turn_on\",\n    \"data\": {\n        \"rgb_color\": [255, 0, 0]  // Red\n    }\n}\n</code></pre>"},{"location":"tools/device-management/control/#covers","title":"Covers","text":"<pre><code>// Open/close\nPOST /api/devices/cover/{device_id}/control\n{\n    \"service\": \"open_cover\",  // or \"close_cover\"\n}\n\n// Set position\n{\n    \"service\": \"set_cover_position\",\n    \"data\": {\n        \"position\": 50  // 0-100\n    }\n}\n</code></pre>"},{"location":"tools/device-management/control/#climate","title":"Climate","text":"<pre><code>// Set temperature\nPOST /api/devices/climate/{device_id}/control\n{\n    \"service\": \"set_temperature\",\n    \"data\": {\n        \"temperature\": 22.5\n    }\n}\n\n// Set mode\n{\n    \"service\": \"set_hvac_mode\",\n    \"data\": {\n        \"hvac_mode\": \"heat\"  // heat, cool, auto, off\n    }\n}\n</code></pre>"},{"location":"tools/device-management/control/#examples","title":"Examples","text":""},{"location":"tools/device-management/control/#control-light-brightness","title":"Control Light Brightness","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/devices/light/living_room/control', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"service\": \"turn_on\",\n        \"data\": {\n            \"brightness\": 128\n        }\n    })\n});\n</code></pre>"},{"location":"tools/device-management/control/#control-cover-position","title":"Control Cover Position","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/devices/cover/bedroom/control', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"service\": \"set_cover_position\",\n        \"data\": {\n            \"position\": 75\n        }\n    })\n});\n</code></pre>"},{"location":"tools/device-management/control/#response-format","title":"Response Format","text":""},{"location":"tools/device-management/control/#success-response","title":"Success Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"state\": \"on\",\n        \"attributes\": {\n            // Updated device attributes\n        }\n    }\n}\n</code></pre>"},{"location":"tools/device-management/control/#error-response","title":"Error Response","text":"<pre><code>{\n    \"success\": false,\n    \"message\": \"Error description\",\n    \"error_code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"tools/device-management/control/#error-handling","title":"Error Handling","text":""},{"location":"tools/device-management/control/#common-error-codes","title":"Common Error Codes","text":"<ul> <li><code>404</code>: Device not found</li> <li><code>401</code>: Unauthorized</li> <li><code>400</code>: Invalid service or parameters</li> <li><code>409</code>: Device unavailable or offline</li> </ul>"},{"location":"tools/device-management/control/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Default limit: 100 requests per 15 minutes</li> <li>Configurable through environment variables:</li> <li><code>DEVICE_CONTROL_RATE_LIMIT</code></li> <li><code>DEVICE_CONTROL_RATE_WINDOW</code></li> </ul>"},{"location":"tools/device-management/control/#best-practices","title":"Best Practices","text":"<ol> <li>Validate device availability before sending commands</li> <li>Implement proper error handling</li> <li>Use appropriate retry strategies for failed commands</li> <li>Cache device capabilities when possible</li> <li>Handle rate limiting gracefully</li> </ol>"},{"location":"tools/device-management/control/#see-also","title":"See Also","text":"<ul> <li>List Devices</li> <li>Device History</li> <li>Event Subscription </li> </ul>"},{"location":"tools/device-management/list-devices/","title":"List Devices Tool","text":"<p>The List Devices tool provides functionality to retrieve and manage device information from your Home Assistant instance.</p>"},{"location":"tools/device-management/list-devices/#features","title":"Features","text":"<ul> <li>List all available Home Assistant devices</li> <li>Group devices by domain</li> <li>Get device states and attributes</li> <li>Filter devices by various criteria</li> </ul>"},{"location":"tools/device-management/list-devices/#usage","title":"Usage","text":""},{"location":"tools/device-management/list-devices/#rest-api","title":"REST API","text":"<pre><code>GET /api/devices\nGET /api/devices/{domain}\nGET /api/devices/{device_id}/state\n</code></pre>"},{"location":"tools/device-management/list-devices/#websocket","title":"WebSocket","text":"<pre><code>// List all devices\n{\n    \"type\": \"list_devices\",\n    \"domain\": \"optional_domain\"\n}\n\n// Get device state\n{\n    \"type\": \"get_device_state\",\n    \"device_id\": \"required_device_id\"\n}\n</code></pre>"},{"location":"tools/device-management/list-devices/#examples","title":"Examples","text":""},{"location":"tools/device-management/list-devices/#list-all-devices","title":"List All Devices","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/devices', {\n    headers: {\n        'Authorization': 'Bearer your_access_token'\n    }\n});\nconst devices = await response.json();\n</code></pre>"},{"location":"tools/device-management/list-devices/#get-devices-by-domain","title":"Get Devices by Domain","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/devices/light', {\n    headers: {\n        'Authorization': 'Bearer your_access_token'\n    }\n});\nconst lightDevices = await response.json();\n</code></pre>"},{"location":"tools/device-management/list-devices/#response-format","title":"Response Format","text":""},{"location":"tools/device-management/list-devices/#device-list-response","title":"Device List Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"devices\": [\n            {\n                \"id\": \"device_id\",\n                \"name\": \"Device Name\",\n                \"domain\": \"light\",\n                \"state\": \"on\",\n                \"attributes\": {\n                    \"brightness\": 255,\n                    \"color_temp\": 370\n                }\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"tools/device-management/list-devices/#device-state-response","title":"Device State Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"state\": \"on\",\n        \"attributes\": {\n            \"brightness\": 255,\n            \"color_temp\": 370\n        },\n        \"last_changed\": \"2024-02-05T12:00:00Z\",\n        \"last_updated\": \"2024-02-05T12:00:00Z\"\n    }\n}\n</code></pre>"},{"location":"tools/device-management/list-devices/#error-handling","title":"Error Handling","text":""},{"location":"tools/device-management/list-devices/#common-error-codes","title":"Common Error Codes","text":"<ul> <li><code>404</code>: Device not found</li> <li><code>401</code>: Unauthorized</li> <li><code>400</code>: Invalid request parameters</li> </ul>"},{"location":"tools/device-management/list-devices/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"success\": false,\n    \"message\": \"Error description\",\n    \"error_code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"tools/device-management/list-devices/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Default limit: 100 requests per 15 minutes</li> <li>Configurable through environment variables:</li> <li><code>DEVICE_LIST_RATE_LIMIT</code></li> <li><code>DEVICE_LIST_RATE_WINDOW</code></li> </ul>"},{"location":"tools/device-management/list-devices/#best-practices","title":"Best Practices","text":"<ol> <li>Cache device lists when possible</li> <li>Use domain filtering for better performance</li> <li>Implement proper error handling</li> <li>Handle rate limiting gracefully</li> </ol>"},{"location":"tools/device-management/list-devices/#see-also","title":"See Also","text":"<ul> <li>Device Control</li> <li>Device History</li> <li>Event Subscription </li> </ul>"},{"location":"tools/events/sse-stats/","title":"SSE Statistics Tool","text":"<p>The SSE Statistics tool provides functionality to monitor and analyze Server-Sent Events (SSE) connections and performance in your Home Assistant MCP instance.</p>"},{"location":"tools/events/sse-stats/#features","title":"Features","text":"<ul> <li>Monitor active SSE connections</li> <li>Track connection statistics</li> <li>Analyze event delivery</li> <li>Monitor resource usage</li> <li>Connection management</li> <li>Performance metrics</li> <li>Historical data</li> <li>Alert configuration</li> </ul>"},{"location":"tools/events/sse-stats/#usage","title":"Usage","text":""},{"location":"tools/events/sse-stats/#rest-api","title":"REST API","text":"<pre><code>GET /api/sse/stats\nGET /api/sse/connections\nGET /api/sse/connections/{connection_id}\nGET /api/sse/metrics\nGET /api/sse/history\n</code></pre>"},{"location":"tools/events/sse-stats/#websocket","title":"WebSocket","text":"<pre><code>// Get SSE stats\n{\n    \"type\": \"get_sse_stats\"\n}\n\n// Get connection details\n{\n    \"type\": \"get_sse_connection\",\n    \"connection_id\": \"required_connection_id\"\n}\n\n// Get performance metrics\n{\n    \"type\": \"get_sse_metrics\",\n    \"period\": \"1h|24h|7d|30d\"\n}\n</code></pre>"},{"location":"tools/events/sse-stats/#examples","title":"Examples","text":""},{"location":"tools/events/sse-stats/#get-current-statistics","title":"Get Current Statistics","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/sse/stats', {\n    headers: {\n        'Authorization': 'Bearer your_access_token'\n    }\n});\nconst stats = await response.json();\n</code></pre>"},{"location":"tools/events/sse-stats/#get-connection-details","title":"Get Connection Details","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/sse/connections/conn_123', {\n    headers: {\n        'Authorization': 'Bearer your_access_token'\n    }\n});\nconst connection = await response.json();\n</code></pre>"},{"location":"tools/events/sse-stats/#get-performance-metrics","title":"Get Performance Metrics","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/sse/metrics?period=24h', {\n    headers: {\n        'Authorization': 'Bearer your_access_token'\n    }\n});\nconst metrics = await response.json();\n</code></pre>"},{"location":"tools/events/sse-stats/#response-format","title":"Response Format","text":""},{"location":"tools/events/sse-stats/#statistics-response","title":"Statistics Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"active_connections\": 42,\n        \"total_events_sent\": 12345,\n        \"events_per_second\": 5.2,\n        \"memory_usage\": 128974848,\n        \"cpu_usage\": 2.5,\n        \"uptime\": \"PT24H\",\n        \"event_backlog\": 0\n    }\n}\n</code></pre>"},{"location":"tools/events/sse-stats/#connection-details-response","title":"Connection Details Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"connection\": {\n            \"id\": \"conn_123\",\n            \"client_id\": \"client_456\",\n            \"user_id\": \"user_789\",\n            \"connected_at\": \"2024-02-05T12:00:00Z\",\n            \"last_event_at\": \"2024-02-05T12:05:00Z\",\n            \"events_sent\": 150,\n            \"subscriptions\": [\n                {\n                    \"event_type\": \"state_changed\",\n                    \"entity_id\": \"light.living_room\"\n                }\n            ],\n            \"state\": \"active\",\n            \"ip_address\": \"192.168.1.100\",\n            \"user_agent\": \"Mozilla/5.0 ...\"\n        }\n    }\n}\n</code></pre>"},{"location":"tools/events/sse-stats/#performance-metrics-response","title":"Performance Metrics Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"metrics\": {\n            \"connections\": {\n                \"current\": 42,\n                \"max\": 100,\n                \"average\": 35.5\n            },\n            \"events\": {\n                \"total\": 12345,\n                \"rate\": {\n                    \"current\": 5.2,\n                    \"max\": 15.0,\n                    \"average\": 4.8\n                }\n            },\n            \"latency\": {\n                \"p50\": 15,\n                \"p95\": 45,\n                \"p99\": 100\n            },\n            \"resources\": {\n                \"memory\": {\n                    \"current\": 128974848,\n                    \"max\": 536870912\n                },\n                \"cpu\": {\n                    \"current\": 2.5,\n                    \"max\": 10.0,\n                    \"average\": 3.2\n                }\n            }\n        },\n        \"period\": \"24h\",\n        \"timestamp\": \"2024-02-05T12:00:00Z\"\n    }\n}\n</code></pre>"},{"location":"tools/events/sse-stats/#error-handling","title":"Error Handling","text":""},{"location":"tools/events/sse-stats/#common-error-codes","title":"Common Error Codes","text":"<ul> <li><code>404</code>: Connection not found</li> <li><code>401</code>: Unauthorized</li> <li><code>400</code>: Invalid request parameters</li> <li><code>503</code>: Service overloaded</li> </ul>"},{"location":"tools/events/sse-stats/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"success\": false,\n    \"message\": \"Error description\",\n    \"error_code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"tools/events/sse-stats/#monitoring-metrics","title":"Monitoring Metrics","text":""},{"location":"tools/events/sse-stats/#connection-metrics","title":"Connection Metrics","text":"<ul> <li>Active connections</li> <li>Connection duration</li> <li>Connection state</li> <li>Client information</li> <li>Geographic distribution</li> <li>Protocol version</li> </ul>"},{"location":"tools/events/sse-stats/#event-metrics","title":"Event Metrics","text":"<ul> <li>Events per second</li> <li>Event types distribution</li> <li>Delivery success rate</li> <li>Event latency</li> <li>Queue size</li> <li>Backlog size</li> </ul>"},{"location":"tools/events/sse-stats/#resource-metrics","title":"Resource Metrics","text":"<ul> <li>Memory usage</li> <li>CPU usage</li> <li>Network bandwidth</li> <li>Disk I/O</li> <li>Connection pool status</li> <li>Thread pool status</li> </ul>"},{"location":"tools/events/sse-stats/#alert-thresholds","title":"Alert Thresholds","text":"<ul> <li>Connection limits</li> <li>Event rate limits</li> <li>Resource usage limits</li> <li>Latency thresholds</li> <li>Error rate thresholds</li> <li>Backlog thresholds</li> </ul>"},{"location":"tools/events/sse-stats/#best-practices","title":"Best Practices","text":"<ol> <li>Monitor connection health</li> <li>Track resource usage</li> <li>Set up alerts</li> <li>Analyze usage patterns</li> <li>Optimize performance</li> <li>Plan capacity</li> <li>Implement failover</li> <li>Regular maintenance</li> </ol>"},{"location":"tools/events/sse-stats/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Connection pooling</li> <li>Event batching</li> <li>Resource throttling</li> <li>Load balancing</li> <li>Cache optimization</li> <li>Connection cleanup</li> </ul>"},{"location":"tools/events/sse-stats/#see-also","title":"See Also","text":"<ul> <li>Event Subscription</li> <li>Device Control</li> <li>Automation Management </li> </ul>"},{"location":"tools/events/subscribe-events/","title":"Event Subscription Tool","text":"<p>The Event Subscription tool provides functionality to subscribe to and monitor real-time events from your Home Assistant instance.</p>"},{"location":"tools/events/subscribe-events/#features","title":"Features","text":"<ul> <li>Subscribe to Home Assistant events</li> <li>Monitor specific entities</li> <li>Domain-based monitoring</li> <li>Event filtering</li> <li>Real-time updates</li> <li>Event history</li> <li>Custom event handling</li> <li>Connection management</li> </ul>"},{"location":"tools/events/subscribe-events/#usage","title":"Usage","text":""},{"location":"tools/events/subscribe-events/#rest-api","title":"REST API","text":"<pre><code>POST /api/events/subscribe\nDELETE /api/events/unsubscribe\nGET /api/events/subscriptions\nGET /api/events/history\n</code></pre>"},{"location":"tools/events/subscribe-events/#websocket","title":"WebSocket","text":"<pre><code>// Subscribe to events\n{\n    \"type\": \"subscribe_events\",\n    \"event_type\": \"optional_event_type\",\n    \"entity_id\": \"optional_entity_id\",\n    \"domain\": \"optional_domain\"\n}\n\n// Unsubscribe from events\n{\n    \"type\": \"unsubscribe_events\",\n    \"subscription_id\": \"required_subscription_id\"\n}\n</code></pre>"},{"location":"tools/events/subscribe-events/#server-sent-events-sse","title":"Server-Sent Events (SSE)","text":"<pre><code>GET /api/events/stream?event_type=state_changed&amp;entity_id=light.living_room\n</code></pre>"},{"location":"tools/events/subscribe-events/#event-types","title":"Event Types","text":"<ul> <li><code>state_changed</code>: Entity state changes</li> <li><code>automation_triggered</code>: Automation executions</li> <li><code>scene_activated</code>: Scene activations</li> <li><code>device_registered</code>: New device registrations</li> <li><code>service_registered</code>: New service registrations</li> <li><code>homeassistant_start</code>: System startup</li> <li><code>homeassistant_stop</code>: System shutdown</li> <li>Custom events</li> </ul>"},{"location":"tools/events/subscribe-events/#examples","title":"Examples","text":""},{"location":"tools/events/subscribe-events/#subscribe-to-all-state-changes","title":"Subscribe to All State Changes","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/events/subscribe', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"event_type\": \"state_changed\"\n    })\n});\n</code></pre>"},{"location":"tools/events/subscribe-events/#monitor-specific-entity","title":"Monitor Specific Entity","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/events/subscribe', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"event_type\": \"state_changed\",\n        \"entity_id\": \"light.living_room\"\n    })\n});\n</code></pre>"},{"location":"tools/events/subscribe-events/#domain-based-monitoring","title":"Domain-Based Monitoring","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/events/subscribe', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"event_type\": \"state_changed\",\n        \"domain\": \"light\"\n    })\n});\n</code></pre>"},{"location":"tools/events/subscribe-events/#sse-connection-example","title":"SSE Connection Example","text":"<pre><code>const eventSource = new EventSource(\n    'http://your-ha-mcp/api/events/stream?event_type=state_changed&amp;entity_id=light.living_room',\n    {\n        headers: {\n            'Authorization': 'Bearer your_access_token'\n        }\n    }\n);\n\neventSource.onmessage = (event) =&gt; {\n    const data = JSON.parse(event.data);\n    console.log('Event received:', data);\n};\n\neventSource.onerror = (error) =&gt; {\n    console.error('SSE error:', error);\n    eventSource.close();\n};\n</code></pre>"},{"location":"tools/events/subscribe-events/#response-format","title":"Response Format","text":""},{"location":"tools/events/subscribe-events/#subscription-response","title":"Subscription Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"subscription_id\": \"sub_123\",\n        \"event_type\": \"state_changed\",\n        \"entity_id\": \"light.living_room\",\n        \"created_at\": \"2024-02-05T12:00:00Z\"\n    }\n}\n</code></pre>"},{"location":"tools/events/subscribe-events/#event-message-format","title":"Event Message Format","text":"<pre><code>{\n    \"event_type\": \"state_changed\",\n    \"entity_id\": \"light.living_room\",\n    \"data\": {\n        \"old_state\": {\n            \"state\": \"off\",\n            \"attributes\": {},\n            \"last_changed\": \"2024-02-05T11:55:00Z\"\n        },\n        \"new_state\": {\n            \"state\": \"on\",\n            \"attributes\": {\n                \"brightness\": 255\n            },\n            \"last_changed\": \"2024-02-05T12:00:00Z\"\n        }\n    },\n    \"origin\": \"LOCAL\",\n    \"time_fired\": \"2024-02-05T12:00:00Z\",\n    \"context\": {\n        \"id\": \"context_123\",\n        \"parent_id\": null,\n        \"user_id\": \"user_123\"\n    }\n}\n</code></pre>"},{"location":"tools/events/subscribe-events/#subscriptions-list-response","title":"Subscriptions List Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"subscriptions\": [\n            {\n                \"id\": \"sub_123\",\n                \"event_type\": \"state_changed\",\n                \"entity_id\": \"light.living_room\",\n                \"created_at\": \"2024-02-05T12:00:00Z\",\n                \"last_event\": \"2024-02-05T12:05:00Z\"\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"tools/events/subscribe-events/#error-handling","title":"Error Handling","text":""},{"location":"tools/events/subscribe-events/#common-error-codes","title":"Common Error Codes","text":"<ul> <li><code>404</code>: Event type not found</li> <li><code>401</code>: Unauthorized</li> <li><code>400</code>: Invalid subscription parameters</li> <li><code>409</code>: Subscription already exists</li> <li><code>429</code>: Too many subscriptions</li> </ul>"},{"location":"tools/events/subscribe-events/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"success\": false,\n    \"message\": \"Error description\",\n    \"error_code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"tools/events/subscribe-events/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Default limits:</li> <li>Maximum subscriptions: 100 per client</li> <li>Maximum event rate: 1000 events per minute</li> <li>Configurable through environment variables:</li> <li><code>EVENT_SUB_MAX_SUBSCRIPTIONS</code></li> <li><code>EVENT_SUB_RATE_LIMIT</code></li> <li><code>EVENT_SUB_RATE_WINDOW</code></li> </ul>"},{"location":"tools/events/subscribe-events/#best-practices","title":"Best Practices","text":"<ol> <li>Use specific event types when possible</li> <li>Implement proper error handling</li> <li>Handle connection interruptions</li> <li>Process events asynchronously</li> <li>Implement backoff strategies</li> <li>Monitor subscription health</li> <li>Clean up unused subscriptions</li> <li>Handle rate limiting gracefully</li> </ol>"},{"location":"tools/events/subscribe-events/#connection-management","title":"Connection Management","text":"<ul> <li>Implement heartbeat monitoring</li> <li>Use reconnection strategies</li> <li>Handle connection timeouts</li> <li>Monitor connection quality</li> <li>Implement fallback mechanisms</li> <li>Clean up resources properly</li> </ul>"},{"location":"tools/events/subscribe-events/#see-also","title":"See Also","text":"<ul> <li>SSE Statistics</li> <li>Device Control</li> <li>Automation Management </li> </ul>"},{"location":"tools/history-state/history/","title":"Device History Tool","text":"<p>The Device History tool allows you to retrieve historical state information for devices in your Home Assistant instance.</p>"},{"location":"tools/history-state/history/#features","title":"Features","text":"<ul> <li>Fetch device state history</li> <li>Filter by time range</li> <li>Get significant changes</li> <li>Aggregate data by time periods</li> <li>Export historical data</li> </ul>"},{"location":"tools/history-state/history/#usage","title":"Usage","text":""},{"location":"tools/history-state/history/#rest-api","title":"REST API","text":"<pre><code>GET /api/history/{device_id}\nGET /api/history/{device_id}/period/{start_time}\nGET /api/history/{device_id}/period/{start_time}/{end_time}\n</code></pre>"},{"location":"tools/history-state/history/#websocket","title":"WebSocket","text":"<pre><code>{\n    \"type\": \"get_history\",\n    \"device_id\": \"required_device_id\",\n    \"start_time\": \"optional_iso_timestamp\",\n    \"end_time\": \"optional_iso_timestamp\",\n    \"significant_changes_only\": false\n}\n</code></pre>"},{"location":"tools/history-state/history/#query-parameters","title":"Query Parameters","text":"Parameter Type Description <code>start_time</code> ISO timestamp Start of the period to fetch history for <code>end_time</code> ISO timestamp End of the period to fetch history for <code>significant_changes_only</code> boolean Only return significant state changes <code>minimal_response</code> boolean Return minimal state information <code>no_attributes</code> boolean Exclude attribute data from response"},{"location":"tools/history-state/history/#examples","title":"Examples","text":""},{"location":"tools/history-state/history/#get-recent-history","title":"Get Recent History","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/history/light.living_room', {\n    headers: {\n        'Authorization': 'Bearer your_access_token'\n    }\n});\nconst history = await response.json();\n</code></pre>"},{"location":"tools/history-state/history/#get-history-for-specific-period","title":"Get History for Specific Period","text":"<pre><code>const startTime = '2024-02-01T00:00:00Z';\nconst endTime = '2024-02-02T00:00:00Z';\nconst response = await fetch(\n    `http://your-ha-mcp/api/history/light.living_room/period/${startTime}/${endTime}`, \n    {\n        headers: {\n            'Authorization': 'Bearer your_access_token'\n        }\n    }\n);\nconst history = await response.json();\n</code></pre>"},{"location":"tools/history-state/history/#response-format","title":"Response Format","text":""},{"location":"tools/history-state/history/#history-response","title":"History Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"history\": [\n            {\n                \"state\": \"on\",\n                \"attributes\": {\n                    \"brightness\": 255\n                },\n                \"last_changed\": \"2024-02-05T12:00:00Z\",\n                \"last_updated\": \"2024-02-05T12:00:00Z\"\n            },\n            {\n                \"state\": \"off\",\n                \"last_changed\": \"2024-02-05T13:00:00Z\",\n                \"last_updated\": \"2024-02-05T13:00:00Z\"\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"tools/history-state/history/#aggregated-history-response","title":"Aggregated History Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"aggregates\": {\n            \"daily\": [\n                {\n                    \"date\": \"2024-02-05\",\n                    \"on_time\": \"PT5H30M\",\n                    \"off_time\": \"PT18H30M\",\n                    \"changes\": 10\n                }\n            ]\n        }\n    }\n}\n</code></pre>"},{"location":"tools/history-state/history/#error-handling","title":"Error Handling","text":""},{"location":"tools/history-state/history/#common-error-codes","title":"Common Error Codes","text":"<ul> <li><code>404</code>: Device not found</li> <li><code>401</code>: Unauthorized</li> <li><code>400</code>: Invalid parameters</li> <li><code>416</code>: Time range too large</li> </ul>"},{"location":"tools/history-state/history/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"success\": false,\n    \"message\": \"Error description\",\n    \"error_code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"tools/history-state/history/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Default limit: 50 requests per 15 minutes</li> <li>Configurable through environment variables:</li> <li><code>HISTORY_RATE_LIMIT</code></li> <li><code>HISTORY_RATE_WINDOW</code></li> </ul>"},{"location":"tools/history-state/history/#data-retention","title":"Data Retention","text":"<ul> <li>Default retention period: 30 days</li> <li>Configurable through environment variables:</li> <li><code>HISTORY_RETENTION_DAYS</code></li> <li>Older data may be automatically aggregated</li> </ul>"},{"location":"tools/history-state/history/#best-practices","title":"Best Practices","text":"<ol> <li>Use appropriate time ranges to avoid large responses</li> <li>Enable <code>significant_changes_only</code> for better performance</li> <li>Use <code>minimal_response</code> when full state data isn't needed</li> <li>Implement proper error handling</li> <li>Cache frequently accessed historical data</li> <li>Handle rate limiting gracefully</li> </ol>"},{"location":"tools/history-state/history/#see-also","title":"See Also","text":"<ul> <li>List Devices</li> <li>Device Control</li> <li>Scene Management </li> </ul>"},{"location":"tools/history-state/scene/","title":"Scene Management Tool","text":"<p>The Scene Management tool provides functionality to manage and control scenes in your Home Assistant instance.</p>"},{"location":"tools/history-state/scene/#features","title":"Features","text":"<ul> <li>List available scenes</li> <li>Activate scenes</li> <li>Create new scenes</li> <li>Update existing scenes</li> <li>Delete scenes</li> <li>Get scene state information</li> </ul>"},{"location":"tools/history-state/scene/#usage","title":"Usage","text":""},{"location":"tools/history-state/scene/#rest-api","title":"REST API","text":"<pre><code>GET /api/scenes\nGET /api/scenes/{scene_id}\nPOST /api/scenes/{scene_id}/activate\nPOST /api/scenes\nPUT /api/scenes/{scene_id}\nDELETE /api/scenes/{scene_id}\n</code></pre>"},{"location":"tools/history-state/scene/#websocket","title":"WebSocket","text":"<pre><code>// List scenes\n{\n    \"type\": \"get_scenes\"\n}\n\n// Activate scene\n{\n    \"type\": \"activate_scene\",\n    \"scene_id\": \"required_scene_id\"\n}\n\n// Create/Update scene\n{\n    \"type\": \"create_scene\",\n    \"scene\": {\n        \"name\": \"required_scene_name\",\n        \"entities\": {\n            // Entity states\n        }\n    }\n}\n</code></pre>"},{"location":"tools/history-state/scene/#scene-configuration","title":"Scene Configuration","text":""},{"location":"tools/history-state/scene/#scene-definition","title":"Scene Definition","text":"<pre><code>{\n    \"name\": \"Movie Night\",\n    \"entities\": {\n        \"light.living_room\": {\n            \"state\": \"on\",\n            \"brightness\": 50,\n            \"color_temp\": 2700\n        },\n        \"cover.living_room\": {\n            \"state\": \"closed\"\n        },\n        \"media_player.tv\": {\n            \"state\": \"on\",\n            \"source\": \"HDMI 1\"\n        }\n    }\n}\n</code></pre>"},{"location":"tools/history-state/scene/#examples","title":"Examples","text":""},{"location":"tools/history-state/scene/#list-all-scenes","title":"List All Scenes","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/scenes', {\n    headers: {\n        'Authorization': 'Bearer your_access_token'\n    }\n});\nconst scenes = await response.json();\n</code></pre>"},{"location":"tools/history-state/scene/#activate-a-scene","title":"Activate a Scene","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/scenes/movie_night/activate', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token'\n    }\n});\n</code></pre>"},{"location":"tools/history-state/scene/#create-a-new-scene","title":"Create a New Scene","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/scenes', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"name\": \"Movie Night\",\n        \"entities\": {\n            \"light.living_room\": {\n                \"state\": \"on\",\n                \"brightness\": 50\n            },\n            \"cover.living_room\": {\n                \"state\": \"closed\"\n            }\n        }\n    })\n});\n</code></pre>"},{"location":"tools/history-state/scene/#response-format","title":"Response Format","text":""},{"location":"tools/history-state/scene/#scene-list-response","title":"Scene List Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"scenes\": [\n            {\n                \"id\": \"scene_id\",\n                \"name\": \"Scene Name\",\n                \"entities\": {\n                    // Entity configurations\n                }\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"tools/history-state/scene/#scene-activation-response","title":"Scene Activation Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"scene_id\": \"activated_scene_id\",\n        \"status\": \"activated\",\n        \"timestamp\": \"2024-02-05T12:00:00Z\"\n    }\n}\n</code></pre>"},{"location":"tools/history-state/scene/#error-handling","title":"Error Handling","text":""},{"location":"tools/history-state/scene/#common-error-codes","title":"Common Error Codes","text":"<ul> <li><code>404</code>: Scene not found</li> <li><code>401</code>: Unauthorized</li> <li><code>400</code>: Invalid scene configuration</li> <li><code>409</code>: Scene activation failed</li> </ul>"},{"location":"tools/history-state/scene/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"success\": false,\n    \"message\": \"Error description\",\n    \"error_code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"tools/history-state/scene/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Default limit: 50 requests per 15 minutes</li> <li>Configurable through environment variables:</li> <li><code>SCENE_RATE_LIMIT</code></li> <li><code>SCENE_RATE_WINDOW</code></li> </ul>"},{"location":"tools/history-state/scene/#best-practices","title":"Best Practices","text":"<ol> <li>Validate entity availability before creating scenes</li> <li>Use meaningful scene names</li> <li>Group related entities in scenes</li> <li>Implement proper error handling</li> <li>Cache scene configurations when possible</li> <li>Handle rate limiting gracefully</li> </ol>"},{"location":"tools/history-state/scene/#scene-transitions","title":"Scene Transitions","text":"<p>Scenes can include transition settings for smooth state changes:</p> <pre><code>{\n    \"name\": \"Sunset Mode\",\n    \"entities\": {\n        \"light.living_room\": {\n            \"state\": \"on\",\n            \"brightness\": 128,\n            \"transition\": 5  // 5 seconds\n        }\n    }\n}\n</code></pre>"},{"location":"tools/history-state/scene/#see-also","title":"See Also","text":"<ul> <li>Device Control</li> <li>Device History</li> <li>Automation Management </li> </ul>"},{"location":"tools/notifications/notify/","title":"Notification Tool","text":"<p>The Notification tool provides functionality to send notifications through various services in your Home Assistant instance.</p>"},{"location":"tools/notifications/notify/#features","title":"Features","text":"<ul> <li>Send notifications</li> <li>Support for multiple notification services</li> <li>Custom notification data</li> <li>Rich media support</li> <li>Notification templates</li> <li>Delivery tracking</li> <li>Priority levels</li> <li>Notification groups</li> </ul>"},{"location":"tools/notifications/notify/#usage","title":"Usage","text":""},{"location":"tools/notifications/notify/#rest-api","title":"REST API","text":"<pre><code>POST /api/notify\nPOST /api/notify/{service_id}\nGET /api/notify/services\nGET /api/notify/history\n</code></pre>"},{"location":"tools/notifications/notify/#websocket","title":"WebSocket","text":"<pre><code>// Send notification\n{\n    \"type\": \"send_notification\",\n    \"service\": \"required_service_id\",\n    \"message\": \"required_message\",\n    \"title\": \"optional_title\",\n    \"data\": {\n        // Service-specific data\n    }\n}\n\n// Get notification services\n{\n    \"type\": \"get_notification_services\"\n}\n</code></pre>"},{"location":"tools/notifications/notify/#supported-services","title":"Supported Services","text":"<ul> <li>Mobile App</li> <li>Email</li> <li>SMS</li> <li>Telegram</li> <li>Discord</li> <li>Slack</li> <li>Push Notifications</li> <li>Custom Services</li> </ul>"},{"location":"tools/notifications/notify/#examples","title":"Examples","text":""},{"location":"tools/notifications/notify/#basic-notification","title":"Basic Notification","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/notify/mobile_app', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"message\": \"Motion detected in living room\",\n        \"title\": \"Security Alert\"\n    })\n});\n</code></pre>"},{"location":"tools/notifications/notify/#rich-notification","title":"Rich Notification","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/notify/mobile_app', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"message\": \"Motion detected in living room\",\n        \"title\": \"Security Alert\",\n        \"data\": {\n            \"image\": \"https://your-camera-snapshot.jpg\",\n            \"actions\": [\n                {\n                    \"action\": \"view_camera\",\n                    \"title\": \"View Camera\"\n                },\n                {\n                    \"action\": \"dismiss\",\n                    \"title\": \"Dismiss\"\n                }\n            ],\n            \"priority\": \"high\",\n            \"ttl\": 3600,\n            \"group\": \"security\"\n        }\n    })\n});\n</code></pre>"},{"location":"tools/notifications/notify/#service-specific-example-telegram","title":"Service-Specific Example (Telegram)","text":"<pre><code>const response = await fetch('http://your-ha-mcp/api/notify/telegram', {\n    method: 'POST',\n    headers: {\n        'Authorization': 'Bearer your_access_token',\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        \"message\": \"Temperature is too high!\",\n        \"title\": \"Climate Alert\",\n        \"data\": {\n            \"parse_mode\": \"markdown\",\n            \"inline_keyboard\": [\n                [\n                    {\n                        \"text\": \"Turn On AC\",\n                        \"callback_data\": \"turn_on_ac\"\n                    }\n                ]\n            ]\n        }\n    })\n});\n</code></pre>"},{"location":"tools/notifications/notify/#response-format","title":"Response Format","text":""},{"location":"tools/notifications/notify/#success-response","title":"Success Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"notification_id\": \"notification_123\",\n        \"status\": \"sent\",\n        \"timestamp\": \"2024-02-05T12:00:00Z\",\n        \"service\": \"mobile_app\"\n    }\n}\n</code></pre>"},{"location":"tools/notifications/notify/#services-list-response","title":"Services List Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"services\": [\n            {\n                \"id\": \"mobile_app\",\n                \"name\": \"Mobile App\",\n                \"enabled\": true,\n                \"features\": [\n                    \"actions\",\n                    \"images\",\n                    \"sound\"\n                ]\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"tools/notifications/notify/#notification-history-response","title":"Notification History Response","text":"<pre><code>{\n    \"success\": true,\n    \"data\": {\n        \"history\": [\n            {\n                \"id\": \"notification_123\",\n                \"service\": \"mobile_app\",\n                \"message\": \"Motion detected\",\n                \"title\": \"Security Alert\",\n                \"timestamp\": \"2024-02-05T12:00:00Z\",\n                \"status\": \"delivered\"\n            }\n        ]\n    }\n}\n</code></pre>"},{"location":"tools/notifications/notify/#error-handling","title":"Error Handling","text":""},{"location":"tools/notifications/notify/#common-error-codes","title":"Common Error Codes","text":"<ul> <li><code>404</code>: Service not found</li> <li><code>401</code>: Unauthorized</li> <li><code>400</code>: Invalid request</li> <li><code>408</code>: Delivery timeout</li> <li><code>422</code>: Invalid notification data</li> </ul>"},{"location":"tools/notifications/notify/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n    \"success\": false,\n    \"message\": \"Error description\",\n    \"error_code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"tools/notifications/notify/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Default limit: 100 notifications per hour</li> <li>Configurable through environment variables:</li> <li><code>NOTIFY_RATE_LIMIT</code></li> <li><code>NOTIFY_RATE_WINDOW</code></li> </ul>"},{"location":"tools/notifications/notify/#best-practices","title":"Best Practices","text":"<ol> <li>Use appropriate priority levels</li> <li>Group related notifications</li> <li>Include relevant context</li> <li>Implement proper error handling</li> <li>Use templates for consistency</li> <li>Consider time zones</li> <li>Respect user preferences</li> <li>Handle rate limiting gracefully</li> </ol>"},{"location":"tools/notifications/notify/#notification-templates","title":"Notification Templates","text":"<pre><code>// Template example\n{\n    \"template\": \"security_alert\",\n    \"data\": {\n        \"location\": \"living_room\",\n        \"event_type\": \"motion\",\n        \"timestamp\": \"2024-02-05T12:00:00Z\"\n    }\n}\n</code></pre>"},{"location":"tools/notifications/notify/#see-also","title":"See Also","text":"<ul> <li>Event Subscription</li> <li>Device Control</li> <li>Automation Management </li> </ul>"}]}